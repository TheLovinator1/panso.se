[tool.poetry]
name = "panso-se"
version = "0.1.0"
description = ""
authors = ["Joakim Hells√©n <tlovinator@gmail.com>"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.12"
django = "^5.1.3"
django-allauth = { extras = ["socialaccount"], version = "^65.2.0" }
django-auto-prefetch = "^1.11.0"
django-browser-reload = "^1.17.0"
django-debug-toolbar = "^4.4.6"
django-filter = "^24.3"
django-htmx = "^1.21.0"
django-ninja = "^1.3.0"
django-pgclone = "^3.6.0"
django-pghistory = "^3.5.0"
django-pgstats = "^1.5.0"
django-pictures = "^1.3.3"
gunicorn = "^23.0.0"
hishel = { extras = ["sqlite"], version = "^0.0.33" }
httpx = "^0.27.2"
platformdirs = "^4.3.6"
psycopg = { extras = ["binary", "pool"], version = "^3.2.3" }
python-dotenv = "^1.0.1"
scrapy = "^2.12.0"
sentry-sdk = { extras = ["django"], version = "^2.19.0" }
sitemap-parser = { git = "https://github.com/TheLovinator1/sitemap-parser.git" }

[tool.poetry.group.dev.dependencies]
coverage = "^7.6.8"
djlint = "^1.36.1"
pre-commit = "^4.0.1"
pytest = "^8.3.3"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py312"
fix = true
unsafe-fixes = true
preview = true
line-length = 120
lint.select = ["ALL"]
lint.pydocstyle.convention = "google"
lint.isort.required-imports = ["from __future__ import annotations"]
lint.ignore = [
    "ANN201", # Checks that public functions and methods have return type annotations.
    "ARG001", # Checks for the presence of unused arguments in function definitions.
    "B008",   # Checks for function calls in default function arguments.
    "COM812", # Checks for the absence of trailing commas. Ignored because of Ruff formatter.
    "CPY001", # Checks for the absence of copyright notices within Python files.
    "D100",   # Checks for undocumented public module definitions.
    "D104",   # Checks for undocumented public package definitions.
    "D105",   # Checks for undocumented magic method definitions.
    "D106",   # Checks for undocumented public class definitions, for nested classes.
    "ERA001", # Checks for commented-out Python code.
    "FIX002", # Checks for "TODO" comments.
    "ISC001", # Checks for implicitly concatenated strings on a single line. Ignored because of Ruff formatter.
    "RUF029", # Checks for functions declared async that do not await or otherwise use features requiring the function to be declared async.
]

[tool.ruff.lint.per-file-ignores]
"*/tests/*.py" = [
    "ARG",     # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT",     # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "PLR2004", # Magic value used in comparison, ...
    "PT001",   # Checks for argument-free @pytest.fixture() decorators
    "S101",    # asserts allowed in tests...
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
]
"**/everything.py" = [
    "S101",
    "ANN401",
    "D103",
    "D102",
    "D101",
    "PLC2401",
    "ANN001",
    "E722",
    "PT015",
    "A001",
    "PLR0914",
    "PLR0915",
    "PLR0912",
    "C901",
    "PLC3002",
]

[tool.djlint]
profile = "django"
format_attribute_template_tags = true

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "config.settings"
filterwarnings = [
    "ignore::django.utils.deprecation.RemovedInDjango60Warning",
    "ignore::pydantic.PydanticDeprecatedSince20",
]

[tool.coverage.report]
show_missing = true
fail_under = 100
exclude_also = ["if TYPE_CHECKING:", "if not DEBUG:"]
omit = ["*/tests/*", "*/migrations/*"]

# https://github.com/astral-sh/ruff/issues/12200#issuecomment-2244480290
[tool.ruff.lint.flake8-tidy-imports.banned-api]
"panso.settings".msg = "See https://docs.djangoproject.com/en/dev/topics/settings/#using-settings-in-python-code. Use 'from django.conf import settings' instead."
