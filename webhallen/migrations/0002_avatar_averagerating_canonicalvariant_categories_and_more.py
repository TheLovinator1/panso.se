# Generated by Django 5.1.2 on 2024-10-16 23:27
# cSpell:disable
from __future__ import annotations

from typing import TYPE_CHECKING, ClassVar

import auto_prefetch
import django.contrib.postgres.fields
import django.db.models.deletion
import django.db.models.manager
import pictures.models
from django.db import migrations, models

if TYPE_CHECKING:
    from django.db.migrations.operations.base import Operation


class Migration(migrations.Migration):
    """Migrate models for converting from scraped JSON to database models."""

    dependencies: ClassVar[list[tuple[str, str]]] = [
        ("webhallen", "0001_initial"),
    ]

    operations: ClassVar[list[Operation]] = [
        migrations.CreateModel(
            name="Avatar",
            fields=[
                ("id", models.PositiveBigIntegerField(help_text="Avatar ID", primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the avatar was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the avatar was last updated")),
                ("title", models.TextField(help_text="Title")),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="AverageRating",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the average rating was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the average rating was last updated"),
                ),
                ("rating", models.FloatField(help_text="Rating")),
                ("rating_type", models.TextField(help_text="Rating type")),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="CanonicalVariant",
            fields=[
                (
                    "id",
                    models.PositiveBigIntegerField(help_text="Canonical variant ID", primary_key=True, serialize=False),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the canonical variant was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the canonical variant was last updated"),
                ),
                ("name", models.TextField(help_text="Variant name")),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Categories",
            fields=[
                ("id", models.PositiveBigIntegerField(help_text="Category ID", primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the category was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the category was last updated")),
                ("active", models.BooleanField(help_text="Is active")),
                ("fyndware_description", models.TextField(help_text="Fyndware description")),
                ("icon", models.TextField(help_text="Icon")),
                ("meta_title", models.TextField(help_text="Meta title")),
                ("name", models.TextField(help_text="Name")),
                ("order", models.PositiveBigIntegerField(help_text="Order")),
                ("seo_name", models.TextField(help_text="SEO name")),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Component",
            fields=[
                (
                    "attribute_id",
                    models.PositiveBigIntegerField(help_text="Attribute ID", primary_key=True, serialize=False),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the component was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the component was last updated")),
                ("name", models.TextField(help_text="Name")),
                ("value", models.TextField(help_text="Value")),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="EAN",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the EAN was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the EAN was last updated")),
                ("ean", models.TextField(help_text="EAN", primary_key=True, serialize=False)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="EnergyMarking",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="Created at")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="Updated at")),
                ("item_code", models.TextField(help_text="Item code")),
                ("label_content", models.TextField(help_text="Label content")),
                ("label_image_url", models.URLField(help_text="Label image URL")),
                ("manufacturer", models.TextField(help_text="Manufacturer")),
                ("product_sheet_content", models.TextField(help_text="Product sheet content")),
                ("rating", models.TextField(help_text="Rating")),
                ("scale", models.TextField(help_text="Scale")),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ExcludeShippingMethod",
            fields=[
                (
                    "id",
                    models.PositiveBigIntegerField(
                        help_text="Exclude shipping method ID",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the exclude shipping method was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the exclude shipping method was last updated"),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="FyndwareClass",
            fields=[
                (
                    "webhallen_id",
                    models.PositiveBigIntegerField(help_text="Fyndware class ID", primary_key=True, serialize=False),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the Fyndware class was created."),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the Fyndware class was last updated."),
                ),
                ("condition", models.TextField(help_text="Condition")),
                ("description", models.TextField(help_text="Description")),
                ("name", models.TextField(help_text="Name")),
                ("short_name", models.TextField(help_text="Short name")),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Image",
            fields=[
                (
                    "product_id",
                    models.PositiveBigIntegerField(help_text="Product ID", primary_key=True, serialize=False),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the image was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the image was last updated")),
                ("url", models.URLField(blank=True, help_text="Image URL")),
                (
                    "image",
                    pictures.models.PictureField(
                        aspect_ratios=[None],  # type: ignore  # noqa: PGH003
                        breakpoints={"l": 1200, "m": 992, "s": 768, "xl": 1400, "xs": 576},  # type: ignore  # noqa: PGH003
                        container_width=1200,  # type: ignore  # noqa: PGH003
                        file_types=["WEBP"],  # type: ignore  # noqa: PGH003
                        grid_columns=12,  # type: ignore  # noqa: PGH003
                        help_text="Product image",
                        pixel_densities=[1, 2],  # type: ignore  # noqa: PGH003
                        upload_to="images/webhallen/product/",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Insurance",
            fields=[
                ("id", models.PositiveBigIntegerField(help_text="Insurance ID", primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the insurance was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the insurance was last updated")),
                ("name", models.TextField(help_text="Insurance name")),
                ("price", models.PositiveBigIntegerField(help_text="Insurance price")),
                ("provider", models.PositiveBigIntegerField(help_text="Insurance provider")),
                ("length", models.PositiveBigIntegerField(help_text="Insurance length")),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Knighthood",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the knighthood was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the knighthood was last updated")),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="MainCategoryPath",
            fields=[
                (
                    "id",
                    models.PositiveBigIntegerField(
                        help_text="Main category path ID",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the main category path was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the main category path was last updated"),
                ),
                ("fyndware_description", models.TextField(help_text="Fyndware description")),
                ("meta_title", models.TextField(help_text="Meta title")),
                ("seo_name", models.TextField(help_text="SEO name")),
                ("active", models.BooleanField(help_text="Is active")),
                ("order", models.PositiveBigIntegerField(help_text="Order")),
                ("icon", models.TextField(help_text="Icon")),
                ("name", models.TextField(help_text="Name")),
                ("has_products", models.BooleanField(help_text="Has products")),
                ("index", models.PositiveBigIntegerField(help_text="Index")),
                ("url_name", models.TextField(help_text="URL name")),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Manufacturer",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the manufacturer was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the manufacturer was last updated")),
                ("id", models.PositiveBigIntegerField(help_text="Manufacturer ID", primary_key=True, serialize=False)),
                ("name", models.TextField(help_text="Manufacturer name")),
                ("takeover_url", models.URLField(help_text="Takeover URL")),
                ("website_url", models.URLField(help_text="Website URL")),
                ("visible", models.BooleanField(help_text="Is visible")),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Order",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the order was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the order was last updated")),
                ("store", models.TextField(help_text="Store ID")),
                ("amount", models.IntegerField(help_text="Amount of stock change (negative for reduction)")),
                ("days_since", models.PositiveBigIntegerField(help_text="Days since the order was placed")),
                ("status", models.IntegerField(blank=True, help_text="Order status (only for CL orders)", null=True)),
                (
                    "ordered",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Ordered quantity (only for CL orders)",
                        null=True,
                    ),
                ),
                (
                    "confirmed",
                    models.BooleanField(default=False, help_text="Order confirmation status (only for CL orders)"),
                ),
                (
                    "delivery_time",
                    models.DateField(blank=True, help_text="Expected delivery date (only for CL orders)", null=True),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="PartNumber",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the part number was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the part number was last updated")),
                ("part_number", models.TextField(help_text="Part number", primary_key=True, serialize=False)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Parts",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the part was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the part was last updated")),
                ("comb", models.TextField(help_text="Value and unit")),
                ("nnv", models.TextField(help_text="Numeric value. Int or float if value is number")),
                ("text_value", models.TextField(help_text="Text value. A string if value is number")),
                ("unit", models.TextField(help_text="Unit. Only if unit for value is given")),
                ("value", models.TextField(help_text="Value")),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="PossibleDeliveryMethod",
            fields=[
                (
                    "id",
                    models.PositiveBigIntegerField(
                        help_text="Possible delivery method ID",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the possible delivery method was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the possible delivery method was last updated"),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Price",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the price was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the price was last updated")),
                ("price", models.TextField(blank=True, help_text="Price of the product")),
                ("currency", models.TextField(blank=True, help_text="The currency.")),
                ("vat", models.FloatField(help_text="VAT", null=True)),
                ("type", models.TextField(blank=True)),
                ("end_at", models.DateTimeField(help_text="End date", null=True)),
                ("start_at", models.DateTimeField(help_text="Start date", null=True)),
                ("amount_left", models.PositiveBigIntegerField(help_text="Amount left", null=True)),
                ("nearly_over", models.BooleanField(help_text="Is nearly over", null=True)),
                ("flash_sale", models.BooleanField(help_text="Is a flash sale", null=True)),
                (
                    "max_qty_per_customer",
                    models.PositiveBigIntegerField(help_text="Maximum quantity per customer", null=True),
                ),
                (
                    "max_amount_for_price",
                    models.PositiveBigIntegerField(help_text="Maximum amount for price", null=True),
                ),
                ("sold_amount", models.PositiveBigIntegerField(help_text="Amount sold", null=True)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Prices",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the shipping prices was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the shipping prices was last updated"),
                ),
                ("price", models.PositiveBigIntegerField(help_text="Price")),
                ("shipping_method_id", models.PositiveBigIntegerField(help_text="Shipping method ID")),
                ("is_fixed_price", models.BooleanField(help_text="Is fixed price")),
                ("maximum_package_size_id", models.PositiveBigIntegerField(help_text="Maximum package size ID")),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Release",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the release was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the release was last updated")),
                ("timestamp", models.DateTimeField(help_text="Timestamp")),
                ("format", models.TextField(help_text="Format")),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ResursPartPaymentPrice",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the Resurs part payment price was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When the Resurs part payment price was last updated",
                    ),
                ),
                ("monthly_cost", models.TextField(help_text="Monthly cost")),
                ("duration_months", models.PositiveBigIntegerField(help_text="Duration in months")),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Section",
            fields=[
                ("id", models.PositiveBigIntegerField(help_text="Section ID", primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the section was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the section was last updated")),
                ("meta_title", models.TextField(help_text="Meta title")),
                ("active", models.BooleanField(help_text="Is active")),
                ("icon", models.TextField(help_text="Icon")),
                ("name", models.TextField(help_text="Name")),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="StatusCode",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the status code was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the status code was last updated")),
                ("status_code", models.TextField(help_text="Status code", primary_key=True, serialize=False)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="VariantGroups",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the variant groups were created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the variant groups were last updated"),
                ),
                ("name", models.TextField(help_text="Name")),
                ("type", models.TextField(help_text="Type")),
                (
                    "values",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        help_text="Values",
                        size=None,
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="VariantProperties",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the variant properties were created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the variant properties were last updated"),
                ),
                ("color", models.TextField(help_text="Variant color")),
                ("connections", models.TextField(help_text="Variant connections")),
                ("storage", models.TextField(help_text="Variant storage")),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Cleaning",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the cleaning was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the cleaning was last updated")),
                (
                    "area_of_use",
                    models.ManyToManyField(
                        help_text="Area of use",
                        related_name="cleaning_area_of_use",
                        to="webhallen.component",
                    ),
                ),
                (
                    "bag_capacity",
                    models.ManyToManyField(
                        help_text="Bag capacity",
                        related_name="cleaning_bag_capacity",
                        to="webhallen.component",
                    ),
                ),
                (
                    "cleaning_agent_type",
                    models.ManyToManyField(
                        help_text="Cleaning agent type",
                        related_name="cleaning_cleaning_agent_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "cleaning_method",
                    models.ManyToManyField(
                        help_text="Cleaning method",
                        related_name="cleaning_cleaning_method",
                        to="webhallen.component",
                    ),
                ),
                (
                    "cleaning_performance_class_for_hard_floor",
                    models.ManyToManyField(
                        help_text="Cleaning performance class for hard floor",
                        related_name="cleaning_cleaning_performance_class_for_hard_floor",
                        to="webhallen.component",
                    ),
                ),
                (
                    "container_type",
                    models.ManyToManyField(
                        help_text="Container type",
                        related_name="cleaning_container_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "dust_emission_class",
                    models.ManyToManyField(
                        help_text="Dust emission class",
                        related_name="cleaning_dust_emission_class",
                        to="webhallen.component",
                    ),
                ),
                (
                    "filter_type",
                    models.ManyToManyField(
                        help_text="Filter type",
                        related_name="cleaning_filter_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "material_cleaning_performance_class",
                    models.ManyToManyField(
                        help_text="Material cleaning performance class",
                        related_name="cleaning_material_cleaning_performance_class",
                        to="webhallen.component",
                    ),
                ),
                (
                    "max_suction_power_air_watts",
                    models.ManyToManyField(
                        help_text="Max suction power (air watts)",
                        related_name="cleaning_max_suction_power_air_watts",
                        to="webhallen.component",
                    ),
                ),
                (
                    "maximum_motor_power",
                    models.ManyToManyField(
                        help_text="Maximum motor power",
                        related_name="cleaning_maximum_motor_power",
                        to="webhallen.component",
                    ),
                ),
                (
                    "product_type",
                    models.ManyToManyField(
                        help_text="Product type",
                        related_name="cleaning_product_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "tank_capacity",
                    models.ManyToManyField(
                        help_text="Tank capacity",
                        related_name="cleaning_tank_capacity",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="CEAccessories",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the CE marking was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the CE marking was last updated")),
                (
                    "intended_for",
                    models.ManyToManyField(
                        help_text="Intended for",
                        related_name="ce_accessories_intended_for",
                        to="webhallen.component",
                    ),
                ),
                (
                    "product_type",
                    models.ManyToManyField(
                        help_text="Product type",
                        related_name="ce_accessories_product_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "suitable_for_installation",
                    models.ManyToManyField(
                        help_text="Suitable for installation",
                        related_name="ce_accessories_suitable_for_installation",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Camera",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the camera was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the camera was last updated")),
                (
                    "image_sensor_type",
                    models.ManyToManyField(
                        help_text="Image sensor type",
                        related_name="camera_image_sensor_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "optical_sensor_resolution",
                    models.ManyToManyField(
                        help_text="Optical sensor resolution",
                        related_name="camera_optical_sensor_resolution",
                        to="webhallen.component",
                    ),
                ),
                (
                    "shooting_methods",
                    models.ManyToManyField(
                        help_text="Shooting methods",
                        related_name="camera_shooting_methods",
                        to="webhallen.component",
                    ),
                ),
                (
                    "type",
                    models.ManyToManyField(help_text="Type", related_name="camera_type", to="webhallen.component"),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Cable",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the cable was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the cable was last updated")),
                ("something", models.TextField(help_text="Something")),
                ("cable", models.ManyToManyField(help_text="Cable", to="webhallen.component")),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Battery",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the battery was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the battery was last updated")),
                (
                    "battery_time_up_to",
                    models.ManyToManyField(
                        help_text="Battery time up to",
                        related_name="battery_time_up_to",
                        to="webhallen.component",
                    ),
                ),
                (
                    "battery_type",
                    models.ManyToManyField(
                        help_text="Battery type",
                        related_name="battery_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "capacity",
                    models.ManyToManyField(
                        help_text="Capacity",
                        related_name="battery_capacity",
                        to="webhallen.component",
                    ),
                ),
                (
                    "capacity_ah",
                    models.ManyToManyField(
                        help_text="Capacity (Ah)",
                        related_name="battery_capacity_ah",
                        to="webhallen.component",
                    ),
                ),
                (
                    "capacity_wh",
                    models.ManyToManyField(
                        help_text="Capacity (Wh)",
                        related_name="battery_capacity_wh",
                        to="webhallen.component",
                    ),
                ),
                (
                    "charging_time",
                    models.ManyToManyField(
                        help_text="Charging time",
                        related_name="battery_charging_time",
                        to="webhallen.component",
                    ),
                ),
                (
                    "fast_charging_technology",
                    models.ManyToManyField(
                        help_text="Fast charging technology",
                        related_name="battery_fast_charging_technology",
                        to="webhallen.component",
                    ),
                ),
                (
                    "form_factor",
                    models.ManyToManyField(
                        help_text="Form factor",
                        related_name="battery_form_factor",
                        to="webhallen.component",
                    ),
                ),
                (
                    "included_quantity",
                    models.ManyToManyField(
                        help_text="Included quantity",
                        related_name="battery_included_quantity",
                        to="webhallen.component",
                    ),
                ),
                (
                    "installed_count",
                    models.ManyToManyField(
                        help_text="Installed count",
                        related_name="battery_installed_count",
                        to="webhallen.component",
                    ),
                ),
                (
                    "run_time",
                    models.ManyToManyField(
                        help_text="Run time",
                        related_name="battery_run_time",
                        to="webhallen.component",
                    ),
                ),
                (
                    "standby_time",
                    models.ManyToManyField(
                        help_text="Standby time",
                        related_name="battery_standby_time",
                        to="webhallen.component",
                    ),
                ),
                (
                    "supplied_voltage",
                    models.ManyToManyField(
                        help_text="Supplied voltage",
                        related_name="battery_supplied_voltage",
                        to="webhallen.component",
                    ),
                ),
                (
                    "talk_time",
                    models.ManyToManyField(
                        help_text="Talk time",
                        related_name="battery_talk_time",
                        to="webhallen.component",
                    ),
                ),
                (
                    "technology",
                    models.ManyToManyField(
                        help_text="Technology",
                        related_name="battery_technology",
                        to="webhallen.component",
                    ),
                ),
                (
                    "wireless_charging",
                    models.ManyToManyField(
                        help_text="Wireless charging",
                        related_name="battery_wireless_charging",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="AVComponent",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the AV component was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the AV component was last updated")),
                ("something", models.TextField(help_text="Something")),
                ("av_component", models.ManyToManyField(help_text="AV component", to="webhallen.component")),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="AudioOutput",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the audio output was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the audio output was last updated")),
                (
                    "anc",
                    models.ManyToManyField(help_text="ANC", related_name="audio_output_anc", to="webhallen.component"),
                ),
                (
                    "audio_output_mode",
                    models.ManyToManyField(
                        help_text="Audio output mode",
                        related_name="audio_output_audio_output_mode",
                        to="webhallen.component",
                    ),
                ),
                (
                    "available_microphone",
                    models.ManyToManyField(
                        help_text="Available microphone",
                        related_name="audio_output_available_microphone",
                        to="webhallen.component",
                    ),
                ),
                (
                    "connection_technology",
                    models.ManyToManyField(
                        help_text="Connection technology",
                        related_name="audio_output_connection_technology",
                        to="webhallen.component",
                    ),
                ),
                (
                    "controls",
                    models.ManyToManyField(
                        help_text="Controls",
                        related_name="audio_output_controls",
                        to="webhallen.component",
                    ),
                ),
                (
                    "dac_resolution",
                    models.ManyToManyField(
                        help_text="DAC resolution",
                        related_name="audio_output_dac_resolution",
                        to="webhallen.component",
                    ),
                ),
                (
                    "foldable",
                    models.ManyToManyField(
                        help_text="Foldable",
                        related_name="audio_output_foldable",
                        to="webhallen.component",
                    ),
                ),
                (
                    "form_factor",
                    models.ManyToManyField(
                        help_text="Form factor",
                        related_name="audio_output_form_factor",
                        to="webhallen.component",
                    ),
                ),
                (
                    "frequency_response",
                    models.ManyToManyField(
                        help_text="Frequency response",
                        related_name="audio_output_frequency_response",
                        to="webhallen.component",
                    ),
                ),
                (
                    "headphone_cup_type",
                    models.ManyToManyField(
                        help_text="Headphone cup type",
                        related_name="audio_output_headphone_cup_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "headphone_ear_parts_type",
                    models.ManyToManyField(
                        help_text="Headphone ear parts type",
                        related_name="audio_output_headphone_ear_parts_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "headphone_mount",
                    models.ManyToManyField(
                        help_text="Headphone mount",
                        related_name="audio_output_headphone_mount",
                        to="webhallen.component",
                    ),
                ),
                (
                    "impedance",
                    models.ManyToManyField(
                        help_text="Impedance",
                        related_name="audio_output_impedance",
                        to="webhallen.component",
                    ),
                ),
                (
                    "interface_connector",
                    models.ManyToManyField(
                        help_text="Interface connector",
                        related_name="audio_output_interface_connector",
                        to="webhallen.component",
                    ),
                ),
                (
                    "interface_type",
                    models.ManyToManyField(
                        help_text="Interface type",
                        related_name="audio_output_interface_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "max_sampling_rate",
                    models.ManyToManyField(
                        help_text="Max sampling rate",
                        related_name="audio_output_max_sampling_rate",
                        to="webhallen.component",
                    ),
                ),
                (
                    "nfc_near_field_communication",
                    models.ManyToManyField(
                        help_text="NFC (Near Field Communication)",
                        related_name="audio_output_nfc_near_field_communication",
                        to="webhallen.component",
                    ),
                ),
                (
                    "output_per_channel",
                    models.ManyToManyField(
                        help_text="Output per channel",
                        related_name="audio_output_output_per_channel",
                        to="webhallen.component",
                    ),
                ),
                (
                    "product_type",
                    models.ManyToManyField(
                        help_text="Product type",
                        related_name="audio_output_product_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "signal_processor",
                    models.ManyToManyField(
                        help_text="Signal processor",
                        related_name="audio_output_signal_processor",
                        to="webhallen.component",
                    ),
                ),
                (
                    "sound_isolating",
                    models.ManyToManyField(
                        help_text="Sound isolating",
                        related_name="audio_output_sound_isolating",
                        to="webhallen.component",
                    ),
                ),
                (
                    "style",
                    models.ManyToManyField(
                        help_text="Style",
                        related_name="audio_output_style",
                        to="webhallen.component",
                    ),
                ),
                (
                    "type",
                    models.ManyToManyField(
                        help_text="Type",
                        related_name="audio_output_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "wireless_technology",
                    models.ManyToManyField(
                        help_text="Wireless technology",
                        related_name="audio_output_wireless_technology",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="AudioInput",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the audio input was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the audio input was last updated")),
                (
                    "connection_technology",
                    models.ManyToManyField(
                        help_text="Connection technology",
                        related_name="audio_input_connection_technology",
                        to="webhallen.component",
                    ),
                ),
                (
                    "microphone_type",
                    models.ManyToManyField(
                        help_text="Microphone type",
                        related_name="audio_input_microphone_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "operational_mode_for_microphone",
                    models.ManyToManyField(
                        help_text="Operational mode for microphone",
                        related_name="audio_input_operational_mode_for_microphone",
                        to="webhallen.component",
                    ),
                ),
                (
                    "sensitivity",
                    models.ManyToManyField(
                        help_text="Sensitivity",
                        related_name="audio_input_sensitivity",
                        to="webhallen.component",
                    ),
                ),
                (
                    "type",
                    models.ManyToManyField(help_text="Type", related_name="audio_input_type", to="webhallen.component"),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Antenna",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the antenna was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the antenna was last updated")),
                (
                    "antenna_placement_mounting",
                    models.ManyToManyField(
                        help_text="Antenna placement mounting",
                        related_name="antenna_antenna_placement_mounting",
                        to="webhallen.component",
                    ),
                ),
                (
                    "compatibility",
                    models.ManyToManyField(
                        help_text="Compatibility",
                        related_name="antenna_compatibility",
                        to="webhallen.component",
                    ),
                ),
                (
                    "form_factor",
                    models.ManyToManyField(
                        help_text="Form factor",
                        related_name="antenna_form_factor",
                        to="webhallen.component",
                    ),
                ),
                (
                    "frequency_range",
                    models.ManyToManyField(
                        help_text="Frequency range",
                        related_name="antenna_frequency_range",
                        to="webhallen.component",
                    ),
                ),
                (
                    "type",
                    models.ManyToManyField(help_text="Type", related_name="antenna_type", to="webhallen.component"),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="AccessoriesForDevices",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the accessories for devices was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the accessories for devices was last updated"),
                ),
                (
                    "capacity",
                    models.ManyToManyField(
                        help_text="Capacity",
                        related_name="accessories_for_devices_capacity",
                        to="webhallen.component",
                    ),
                ),
                (
                    "intended_for",
                    models.ManyToManyField(
                        help_text="Intended for",
                        related_name="accessories_for_devices_intended_for",
                        to="webhallen.component",
                    ),
                ),
                (
                    "type",
                    models.ManyToManyField(
                        help_text="Type",
                        related_name="accessories_for_devices_type",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Consumables",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the consumables was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the consumables was last updated")),
                (
                    "color",
                    models.ManyToManyField(
                        help_text="Color",
                        related_name="consumables_color",
                        to="webhallen.component",
                    ),
                ),
                (
                    "consumable_type",
                    models.ManyToManyField(
                        help_text="Consumable type",
                        related_name="consumables_consumable_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "coverage_for_lifetime",
                    models.ManyToManyField(
                        help_text="Coverage for lifetime",
                        related_name="consumables_coverage_for_lifetime",
                        to="webhallen.component",
                    ),
                ),
                (
                    "number_of_pages_during_lifetime",
                    models.ManyToManyField(
                        help_text="Number of pages during life cycle",
                        related_name="consumables_number_of_pages_during_lifetime",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ControllerCard",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the controller card was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the controller card was last updated"),
                ),
                (
                    "form_factor",
                    models.ManyToManyField(
                        help_text="Form factor",
                        related_name="controller_card_form_factor",
                        to="webhallen.component",
                    ),
                ),
                (
                    "host_bus",
                    models.ManyToManyField(
                        help_text="Host bus",
                        related_name="controller_card_host_bus",
                        to="webhallen.component",
                    ),
                ),
                (
                    "interface",
                    models.ManyToManyField(
                        help_text="Interface",
                        related_name="controller_card_interface",
                        to="webhallen.component",
                    ),
                ),
                (
                    "interface_type",
                    models.ManyToManyField(
                        help_text="Interface type",
                        related_name="controller_card_interface_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "max_number_of_devices",
                    models.ManyToManyField(
                        help_text="Max number of devices",
                        related_name="controller_card_max_number_of_devices",
                        to="webhallen.component",
                    ),
                ),
                (
                    "number_of_channels",
                    models.ManyToManyField(
                        help_text="Number of channels",
                        related_name="controller_card_number_of_channels",
                        to="webhallen.component",
                    ),
                ),
                (
                    "power_source",
                    models.ManyToManyField(
                        help_text="Power source",
                        related_name="controller_card_power_source",
                        to="webhallen.component",
                    ),
                ),
                (
                    "raid_level",
                    models.ManyToManyField(
                        help_text="RAID level",
                        related_name="controller_card_raid_level",
                        to="webhallen.component",
                    ),
                ),
                (
                    "supported_devices",
                    models.ManyToManyField(
                        help_text="Supported devices",
                        related_name="controller_card_supported_devices",
                        to="webhallen.component",
                    ),
                ),
                (
                    "type",
                    models.ManyToManyField(
                        help_text="Type",
                        related_name="controller_card_type",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="DimensionsAndWeight",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the dimensions and weight were created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the dimensions and weight were last updated"),
                ),
                (
                    "backrest_height",
                    models.ManyToManyField(
                        help_text="Backrest height",
                        related_name="dimensions_backrest_height",
                        to="webhallen.component",
                    ),
                ),
                (
                    "backrest_width",
                    models.ManyToManyField(
                        help_text="Backrest width",
                        related_name="dimensions_backrest_width",
                        to="webhallen.component",
                    ),
                ),
                (
                    "comment",
                    models.ManyToManyField(
                        help_text="Comment",
                        related_name="dimensions_comment",
                        to="webhallen.component",
                    ),
                ),
                (
                    "comments",
                    models.ManyToManyField(
                        help_text="Comments",
                        related_name="dimensions_comments",
                        to="webhallen.component",
                    ),
                ),
                (
                    "diameter",
                    models.ManyToManyField(
                        help_text="Diameter",
                        related_name="dimensions_diameter",
                        to="webhallen.component",
                    ),
                ),
                (
                    "height",
                    models.ManyToManyField(
                        help_text="Height",
                        related_name="dimensions_height",
                        to="webhallen.component",
                    ),
                ),
                (
                    "length",
                    models.ManyToManyField(
                        help_text="Length",
                        related_name="dimensions_length",
                        to="webhallen.component",
                    ),
                ),
                (
                    "length_in_meters",
                    models.ManyToManyField(
                        help_text="Length in meters",
                        related_name="dimensions_length_in_meters",
                        to="webhallen.component",
                    ),
                ),
                (
                    "max_length",
                    models.ManyToManyField(
                        help_text="Maximum length",
                        related_name="dimensions_max_length",
                        to="webhallen.component",
                    ),
                ),
                (
                    "min_height",
                    models.ManyToManyField(
                        help_text="Minimum height",
                        related_name="dimensions_min_height",
                        to="webhallen.component",
                    ),
                ),
                (
                    "thickness",
                    models.ManyToManyField(
                        help_text="Thickness",
                        related_name="dimensions_thickness",
                        to="webhallen.component",
                    ),
                ),
                (
                    "volume",
                    models.ManyToManyField(
                        help_text="Volume",
                        related_name="dimensions_volume",
                        to="webhallen.component",
                    ),
                ),
                (
                    "weight",
                    models.ManyToManyField(
                        help_text="Weight",
                        related_name="dimensions_weight",
                        to="webhallen.component",
                    ),
                ),
                (
                    "width",
                    models.ManyToManyField(
                        help_text="Width",
                        related_name="dimensions_width",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ExternalHardDrive",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the external hard drive was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the external hard drive was last updated"),
                ),
                (
                    "max_data_transfer_rate",
                    models.ManyToManyField(
                        help_text="Max data transfer rate",
                        related_name="external_hard_drive_max_data_transfer_rate",
                        to="webhallen.component",
                    ),
                ),
                (
                    "power_source",
                    models.ManyToManyField(
                        help_text="Power source",
                        related_name="external_hard_drive_power_source",
                        to="webhallen.component",
                    ),
                ),
                (
                    "usb_c_port",
                    models.ManyToManyField(
                        help_text="USB-C port",
                        related_name="external_hard_drive_usb_c_port",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="FlashMemory",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the flash memory was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the flash memory was last updated")),
                (
                    "form_factor",
                    models.ManyToManyField(
                        help_text="Form factor",
                        related_name="flash_memory_form_factor",
                        to="webhallen.component",
                    ),
                ),
                (
                    "included_memory_adapter",
                    models.ManyToManyField(
                        help_text="Included memory adapter",
                        related_name="flash_memory_included_memory_adapter",
                        to="webhallen.component",
                    ),
                ),
                (
                    "installed_size",
                    models.ManyToManyField(
                        help_text="Installed size",
                        related_name="flash_memory_installed_size",
                        to="webhallen.component",
                    ),
                ),
                (
                    "interface_type",
                    models.ManyToManyField(
                        help_text="Interface type",
                        related_name="flash_memory_interface_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "internal_memory_capacity",
                    models.ManyToManyField(
                        help_text="Internal memory capacity",
                        related_name="flash_memory_internal_memory_capacity",
                        to="webhallen.component",
                    ),
                ),
                (
                    "max_size_supported",
                    models.ManyToManyField(
                        help_text="Max size supported",
                        related_name="flash_memory_max_size_supported",
                        to="webhallen.component",
                    ),
                ),
                (
                    "product_type",
                    models.ManyToManyField(
                        help_text="Product type",
                        related_name="flash_memory_product_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "read_speed",
                    models.ManyToManyField(
                        help_text="Read speed",
                        related_name="flash_memory_read_speed",
                        to="webhallen.component",
                    ),
                ),
                (
                    "speed_class",
                    models.ManyToManyField(
                        help_text="Speed class",
                        related_name="flash_memory_speed_class",
                        to="webhallen.component",
                    ),
                ),
                (
                    "storage_capacity",
                    models.ManyToManyField(
                        help_text="Storage capacity",
                        related_name="flash_memory_storage_capacity",
                        to="webhallen.component",
                    ),
                ),
                (
                    "storage_speed",
                    models.ManyToManyField(
                        help_text="Storage speed",
                        related_name="flash_memory_storage_speed",
                        to="webhallen.component",
                    ),
                ),
                (
                    "supported_flash_memory_cards",
                    models.ManyToManyField(
                        help_text="Supported flash memory cards",
                        related_name="flash_memory_supported_flash_memory_cards",
                        to="webhallen.component",
                    ),
                ),
                (
                    "supported_memory_cards",
                    models.ManyToManyField(
                        help_text="Supported memory cards",
                        related_name="flash_memory_supported_memory_cards",
                        to="webhallen.component",
                    ),
                ),
                (
                    "technology",
                    models.ManyToManyField(
                        help_text="Technology",
                        related_name="flash_memory_technology",
                        to="webhallen.component",
                    ),
                ),
                (
                    "user_memory",
                    models.ManyToManyField(
                        help_text="User memory",
                        related_name="flash_memory_user_memory",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Game",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the game was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the game was last updated")),
                (
                    "australian_state_evaluation",
                    models.ManyToManyField(
                        help_text="Australian state evaluation",
                        related_name="game_australian_state_evaluation",
                        to="webhallen.component",
                    ),
                ),
                (
                    "esrb_rating",
                    models.ManyToManyField(
                        help_text="ESRB rating",
                        related_name="game_esrb_rating",
                        to="webhallen.component",
                    ),
                ),
                (
                    "genre",
                    models.ManyToManyField(help_text="Genre", related_name="game_genre", to="webhallen.component"),
                ),
                (
                    "max_number_of_players",
                    models.ManyToManyField(
                        help_text="Max number of players",
                        related_name="game_max_number_of_players",
                        to="webhallen.component",
                    ),
                ),
                (
                    "multiplayer",
                    models.ManyToManyField(
                        help_text="Multiplayer",
                        related_name="game_multiplayer",
                        to="webhallen.component",
                    ),
                ),
                (
                    "online_play",
                    models.ManyToManyField(
                        help_text="Online play",
                        related_name="game_online_play",
                        to="webhallen.component",
                    ),
                ),
                (
                    "pegi_classification",
                    models.ManyToManyField(
                        help_text="PEGI classification",
                        related_name="game_pegi_classification",
                        to="webhallen.component",
                    ),
                ),
                (
                    "pegi_content_description",
                    models.ManyToManyField(
                        help_text="PEGI content description",
                        related_name="game_pegi_content_description",
                        to="webhallen.component",
                    ),
                ),
                (
                    "platform",
                    models.ManyToManyField(
                        help_text="Platform",
                        related_name="game_platform",
                        to="webhallen.component",
                    ),
                ),
                (
                    "release_day",
                    models.ManyToManyField(
                        help_text="Release day",
                        related_name="game_release_day",
                        to="webhallen.component",
                    ),
                ),
                (
                    "release_month",
                    models.ManyToManyField(
                        help_text="Release month",
                        related_name="game_release_month",
                        to="webhallen.component",
                    ),
                ),
                (
                    "release_year",
                    models.ManyToManyField(
                        help_text="Release year",
                        related_name="game_release_year",
                        to="webhallen.component",
                    ),
                ),
                (
                    "usk_age_rating",
                    models.ManyToManyField(
                        help_text="USK age rating",
                        related_name="game_usk_age_rating",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="General",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the general information was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the general information was last updated"),
                ),
                (
                    "AC_adapter_included",
                    models.ManyToManyField(
                        help_text="AC adapter included",
                        related_name="products_AC_adapter_included",
                        to="webhallen.component",
                    ),
                ),
                (
                    "_class",
                    models.ManyToManyField(help_text="Class", related_name="products_class", to="webhallen.component"),
                ),
                (
                    "accessory_category",
                    models.ManyToManyField(
                        help_text="Accessory category",
                        related_name="products_accessory_category",
                        to="webhallen.component",
                    ),
                ),
                (
                    "arm_construction",
                    models.ManyToManyField(
                        help_text="Arm construction",
                        related_name="products_arm_construction",
                        to="webhallen.component",
                    ),
                ),
                (
                    "armrest",
                    models.ManyToManyField(
                        help_text="Armrest",
                        related_name="products_armrest",
                        to="webhallen.component",
                    ),
                ),
                (
                    "battery_included",
                    models.ManyToManyField(
                        help_text="Battery included",
                        related_name="products_battery_included",
                        to="webhallen.component",
                    ),
                ),
                (
                    "built_in_components",
                    models.ManyToManyField(
                        help_text="Built-in components",
                        related_name="products_built_in_components",
                        to="webhallen.component",
                    ),
                ),
                (
                    "cable_length",
                    models.ManyToManyField(
                        help_text="Cable length",
                        related_name="products_cable_length",
                        to="webhallen.component",
                    ),
                ),
                (
                    "car_power_adapter_included",
                    models.ManyToManyField(
                        help_text="Car power adapter included",
                        related_name="products_car_power_adapter_included",
                        to="webhallen.component",
                    ),
                ),
                (
                    "category",
                    models.ManyToManyField(
                        help_text="Category",
                        related_name="products_category",
                        to="webhallen.component",
                    ),
                ),
                (
                    "character_theme",
                    models.ManyToManyField(
                        help_text="Character theme",
                        related_name="products_character_theme",
                        to="webhallen.component",
                    ),
                ),
                (
                    "clamp_mount",
                    models.ManyToManyField(
                        help_text="Clamp mount",
                        related_name="products_clamp_mount",
                        to="webhallen.component",
                    ),
                ),
                (
                    "connection",
                    models.ManyToManyField(
                        help_text="Connection",
                        related_name="products_connection",
                        to="webhallen.component",
                    ),
                ),
                (
                    "consumable_subcategory",
                    models.ManyToManyField(
                        help_text="Consumable subcategory",
                        related_name="products_consumable_subcategory",
                        to="webhallen.component",
                    ),
                ),
                (
                    "cordless",
                    models.ManyToManyField(
                        help_text="Cordless",
                        related_name="products_cordless",
                        to="webhallen.component",
                    ),
                ),
                (
                    "designed_for",
                    models.ManyToManyField(
                        help_text="Designed for",
                        related_name="products_designed_for",
                        to="webhallen.component",
                    ),
                ),
                (
                    "diameter",
                    models.ManyToManyField(
                        help_text="Diameter",
                        related_name="products_diameter",
                        to="webhallen.component",
                    ),
                ),
                (
                    "dimmer",
                    models.ManyToManyField(
                        help_text="Dimmer",
                        related_name="products_dimmer",
                        to="webhallen.component",
                    ),
                ),
                (
                    "environment",
                    models.ManyToManyField(
                        help_text="Environment",
                        related_name="products_environment",
                        to="webhallen.component",
                    ),
                ),
                (
                    "ergonomic",
                    models.ManyToManyField(
                        help_text="Ergonomic",
                        related_name="products_ergonomic",
                        to="webhallen.component",
                    ),
                ),
                (
                    "features",
                    models.ManyToManyField(
                        help_text="Features",
                        related_name="products_features",
                        to="webhallen.component",
                    ),
                ),
                (
                    "headrest",
                    models.ManyToManyField(
                        help_text="Headrest",
                        related_name="products_headrest",
                        to="webhallen.component",
                    ),
                ),
                (
                    "indoor_outdoor",
                    models.ManyToManyField(
                        help_text="Indoor/outdoor",
                        related_name="products_indoor_outdoor",
                        to="webhallen.component",
                    ),
                ),
                (
                    "installation_type",
                    models.ManyToManyField(
                        help_text="Installation type",
                        related_name="products_installation_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "kit_contents",
                    models.ManyToManyField(
                        help_text="Kit contents",
                        related_name="products_kit_contents",
                        to="webhallen.component",
                    ),
                ),
                (
                    "learning",
                    models.ManyToManyField(
                        help_text="Learning",
                        related_name="products_learning",
                        to="webhallen.component",
                    ),
                ),
                (
                    "lock_type",
                    models.ManyToManyField(
                        help_text="Lock type",
                        related_name="products_lock_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "max_age",
                    models.ManyToManyField(
                        help_text="Maximum age",
                        related_name="products_max_age",
                        to="webhallen.component",
                    ),
                ),
                (
                    "mechanism",
                    models.ManyToManyField(
                        help_text="Mechanism",
                        related_name="products_mechanism",
                        to="webhallen.component",
                    ),
                ),
                (
                    "media_subcategory",
                    models.ManyToManyField(
                        help_text="Media subcategory",
                        related_name="products_media_subcategory",
                        to="webhallen.component",
                    ),
                ),
                (
                    "min_age",
                    models.ManyToManyField(
                        help_text="Minimum age",
                        related_name="products_min_age",
                        to="webhallen.component",
                    ),
                ),
                (
                    "number_of_component_sets",
                    models.ManyToManyField(
                        help_text="Number of component sets",
                        related_name="products_number_of_component_sets",
                        to="webhallen.component",
                    ),
                ),
                (
                    "number_of_installed_light_bulbs",
                    models.ManyToManyField(
                        help_text="Number of installed light bulbs",
                        related_name="products_number_of_installed_light_bulbs",
                        to="webhallen.component",
                    ),
                ),
                (
                    "number_of_modules",
                    models.ManyToManyField(
                        help_text="Number of modules",
                        related_name="products_number_of_modules",
                        to="webhallen.component",
                    ),
                ),
                (
                    "number_of_set_parts",
                    models.ManyToManyField(
                        help_text="Number of set parts",
                        related_name="products_number_of_set_parts",
                        to="webhallen.component",
                    ),
                ),
                (
                    "number_of_sockets",
                    models.ManyToManyField(
                        help_text="Number of sockets",
                        related_name="products_number_of_sockets",
                        to="webhallen.component",
                    ),
                ),
                (
                    "number_of_supported_light_bulbs",
                    models.ManyToManyField(
                        help_text="Number of supported light bulbs",
                        related_name="products_number_of_supported_light_bulbs",
                        to="webhallen.component",
                    ),
                ),
                (
                    "one_board_computer_included",
                    models.ManyToManyField(
                        help_text="One board computer included",
                        related_name="products_one_board_computer_included",
                        to="webhallen.component",
                    ),
                ),
                (
                    "output_bar_configuration",
                    models.ManyToManyField(
                        help_text="Output bar configuration",
                        related_name="products_output_bar_configuration",
                        to="webhallen.component",
                    ),
                ),
                (
                    "output_connection_type",
                    models.ManyToManyField(
                        help_text="Output connection type",
                        related_name="products_output_connection_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "payment_technology",
                    models.ManyToManyField(
                        help_text="Payment technology",
                        related_name="products_payment_technology",
                        to="webhallen.component",
                    ),
                ),
                (
                    "power",
                    models.ManyToManyField(help_text="Power", related_name="products_power", to="webhallen.component"),
                ),
                (
                    "printer_consumables_class",
                    models.ManyToManyField(
                        help_text="Printer consumables class",
                        related_name="products_printer_consumables_class",
                        to="webhallen.component",
                    ),
                ),
                (
                    "product_type",
                    models.ManyToManyField(
                        help_text="Product type",
                        related_name="products_product_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "recommended_for",
                    models.ManyToManyField(
                        help_text="Recommended for",
                        related_name="products_recommended_for",
                        to="webhallen.component",
                    ),
                ),
                (
                    "recommended_use",
                    models.ManyToManyField(
                        help_text="Recommended use",
                        related_name="products_recommended_use",
                        to="webhallen.component",
                    ),
                ),
                (
                    "shape",
                    models.ManyToManyField(help_text="Shape", related_name="products_shape", to="webhallen.component"),
                ),
                (
                    "size",
                    models.ManyToManyField(help_text="Size", related_name="products_size", to="webhallen.component"),
                ),
                (
                    "socket",
                    models.ManyToManyField(
                        help_text="Socket",
                        related_name="products_socket",
                        to="webhallen.component",
                    ),
                ),
                (
                    "socket_size",
                    models.ManyToManyField(
                        help_text="Socket size",
                        related_name="products_socket_size",
                        to="webhallen.component",
                    ),
                ),
                (
                    "solution",
                    models.ManyToManyField(
                        help_text="Solution",
                        related_name="products_solution",
                        to="webhallen.component",
                    ),
                ),
                (
                    "style",
                    models.ManyToManyField(help_text="Style", related_name="products_style", to="webhallen.component"),
                ),
                (
                    "subcategory",
                    models.ManyToManyField(
                        help_text="Subcategory",
                        related_name="products_subcategory",
                        to="webhallen.component",
                    ),
                ),
                (
                    "suitable_for",
                    models.ManyToManyField(
                        help_text="Suitable for",
                        related_name="products_suitable_for",
                        to="webhallen.component",
                    ),
                ),
                (
                    "supported_wattage_for_light_bulb",
                    models.ManyToManyField(
                        help_text="Supported wattage for light bulb",
                        related_name="products_supported_wattage_for_light_bulb",
                        to="webhallen.component",
                    ),
                ),
                (
                    "switch_location",
                    models.ManyToManyField(
                        help_text="Switch location",
                        related_name="products_switch_location",
                        to="webhallen.component",
                    ),
                ),
                (
                    "switch_type",
                    models.ManyToManyField(
                        help_text="Switch type",
                        related_name="products_switch_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "technology",
                    models.ManyToManyField(
                        help_text="Technology",
                        related_name="products_technology",
                        to="webhallen.component",
                    ),
                ),
                (
                    "thermometer_scale",
                    models.ManyToManyField(
                        help_text="Thermometer scale",
                        related_name="products_thermometer_scale",
                        to="webhallen.component",
                    ),
                ),
                (
                    "tilt",
                    models.ManyToManyField(help_text="Tilt", related_name="products_tilt", to="webhallen.component"),
                ),
                (
                    "tilt_lock",
                    models.ManyToManyField(
                        help_text="Tilt lock",
                        related_name="products_tilt_lock",
                        to="webhallen.component",
                    ),
                ),
                (
                    "tilt_tension_adjustment",
                    models.ManyToManyField(
                        help_text="Tilt tension adjustment",
                        related_name="products_tilt_tension_adjustment",
                        to="webhallen.component",
                    ),
                ),
                ("tip", models.ManyToManyField(help_text="Tip", related_name="products_tip", to="webhallen.component")),
                (
                    "tip_size",
                    models.ManyToManyField(
                        help_text="Tip size",
                        related_name="products_tip_size",
                        to="webhallen.component",
                    ),
                ),
                (
                    "tool_set_parts",
                    models.ManyToManyField(
                        help_text="Tool set parts",
                        related_name="products_tool_set_parts",
                        to="webhallen.component",
                    ),
                ),
                (
                    "total_length",
                    models.ManyToManyField(
                        help_text="Total length",
                        related_name="products_total_length",
                        to="webhallen.component",
                    ),
                ),
                (
                    "tracking_data",
                    models.ManyToManyField(
                        help_text="Tracking data",
                        related_name="products_tracking_data",
                        to="webhallen.component",
                    ),
                ),
                (
                    "type",
                    models.ManyToManyField(help_text="Type", related_name="products_type", to="webhallen.component"),
                ),
                (
                    "usage_modes",
                    models.ManyToManyField(
                        help_text="Usage modes",
                        related_name="products_usage_modes",
                        to="webhallen.component",
                    ),
                ),
                (
                    "waterproof",
                    models.ManyToManyField(
                        help_text="Waterproof",
                        related_name="products_waterproof",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="GrossDimensionsAndWeight",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When the gross dimensions and weight was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When the gross dimensions and weight was last updated",
                    ),
                ),
                (
                    "packing_depth",
                    models.ManyToManyField(
                        help_text="Packing depth",
                        related_name="gross_dimensions_packing_depth",
                        to="webhallen.component",
                    ),
                ),
                (
                    "packing_height",
                    models.ManyToManyField(
                        help_text="Packing height",
                        related_name="gross_dimensions_packing_height",
                        to="webhallen.component",
                    ),
                ),
                (
                    "packing_weight",
                    models.ManyToManyField(
                        help_text="Packing weight",
                        related_name="gross_dimensions_packing_weight",
                        to="webhallen.component",
                    ),
                ),
                (
                    "packing_width",
                    models.ManyToManyField(
                        help_text="Packing width",
                        related_name="gross_dimensions_packing_width",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="HDD",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the HDD was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the HDD was last updated")),
                (
                    "_24_7_operation",
                    models.ManyToManyField(
                        help_text="24/7 operation",
                        related_name="hdd_24_7_operation",
                        to="webhallen.component",
                    ),
                ),
                (
                    "_4_kb_random_read",
                    models.ManyToManyField(
                        help_text="The 4 KB random read",
                        related_name="hdd_4_kb_random_read",
                        to="webhallen.component",
                    ),
                ),
                (
                    "average_seek_time",
                    models.ManyToManyField(
                        help_text="Average seek time",
                        related_name="hdd_average_seek_time",
                        to="webhallen.component",
                    ),
                ),
                (
                    "buffer_size",
                    models.ManyToManyField(
                        help_text="Buffer size",
                        related_name="hdd_buffer_size",
                        to="webhallen.component",
                    ),
                ),
                (
                    "data_transfer_rate",
                    models.ManyToManyField(
                        help_text="Data transfer rate",
                        related_name="hdd_data_transfer_rate",
                        to="webhallen.component",
                    ),
                ),
                (
                    "external_device_type",
                    models.ManyToManyField(
                        help_text="External device type",
                        related_name="hdd_external_device_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "form_factor",
                    models.ManyToManyField(
                        help_text="Form factor",
                        related_name="hdd_form_factor",
                        to="webhallen.component",
                    ),
                ),
                (
                    "form_factor_metric",
                    models.ManyToManyField(
                        help_text="Form factor metric",
                        related_name="hdd_form_factor_metric",
                        to="webhallen.component",
                    ),
                ),
                (
                    "form_factor_short",
                    models.ManyToManyField(
                        help_text="Form factor short",
                        related_name="hdd_form_factor_short",
                        to="webhallen.component",
                    ),
                ),
                (
                    "form_factor_short_metric",
                    models.ManyToManyField(
                        help_text="Form factor short metric",
                        related_name="hdd_form_factor_short_metric",
                        to="webhallen.component",
                    ),
                ),
                (
                    "hard_disk_features",
                    models.ManyToManyField(
                        help_text="Hard disk features",
                        related_name="hdd_hard_disk_features",
                        to="webhallen.component",
                    ),
                ),
                (
                    "hard_disk_space",
                    models.ManyToManyField(
                        help_text="Hard disk space",
                        related_name="hdd_hard_disk_space",
                        to="webhallen.component",
                    ),
                ),
                (
                    "hard_disk_type",
                    models.ManyToManyField(
                        help_text="Hard disk type",
                        related_name="hdd_hard_disk_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "interface",
                    models.ManyToManyField(
                        help_text="Interface",
                        related_name="hdd_interface",
                        to="webhallen.component",
                    ),
                ),
                (
                    "interface_class",
                    models.ManyToManyField(
                        help_text="Interface class",
                        related_name="hdd_interface_class",
                        to="webhallen.component",
                    ),
                ),
                (
                    "internal_data_frequency",
                    models.ManyToManyField(
                        help_text="Internal data frequency",
                        related_name="hdd_internal_data_frequency",
                        to="webhallen.component",
                    ),
                ),
                (
                    "internal_data_write_speed",
                    models.ManyToManyField(
                        help_text="Internal data write speed",
                        related_name="hdd_internal_data_write_speed",
                        to="webhallen.component",
                    ),
                ),
                (
                    "nand_flash_memory_type",
                    models.ManyToManyField(
                        help_text="NAND flash memory type",
                        related_name="hdd_nand_flash_memory_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "spindle_speed",
                    models.ManyToManyField(
                        help_text="Spindle speed",
                        related_name="hdd_spindle_speed",
                        to="webhallen.component",
                    ),
                ),
                (
                    "ssd_capacity",
                    models.ManyToManyField(
                        help_text="SSD capacity",
                        related_name="hdd_ssd_capacity",
                        to="webhallen.component",
                    ),
                ),
                (
                    "ssd_form_factor",
                    models.ManyToManyField(
                        help_text="SSD form factor",
                        related_name="hdd_ssd_form_factor",
                        to="webhallen.component",
                    ),
                ),
                ("type", models.ManyToManyField(help_text="Type", related_name="hdd_type", to="webhallen.component")),
                (
                    "type_of_interface",
                    models.ManyToManyField(
                        help_text="Type of interface",
                        related_name="hdd_type_of_interface",
                        to="webhallen.component",
                    ),
                ),
                (
                    "unrecoverable_error",
                    models.ManyToManyField(
                        help_text="Unrecoverable error",
                        related_name="hdd_unrecoverable_error",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Header",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the header was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the header was last updated")),
                (
                    "batch",
                    models.ManyToManyField(help_text="Batch", related_name="products_batch", to="webhallen.component"),
                ),
                (
                    "brand",
                    models.ManyToManyField(help_text="Brand", related_name="products_brand", to="webhallen.component"),
                ),
                (
                    "compatibility",
                    models.ManyToManyField(
                        help_text="Compatibility",
                        related_name="products_compatibility",
                        to="webhallen.component",
                    ),
                ),
                (
                    "country_specific_batches",
                    models.ManyToManyField(
                        help_text="Country-specific batches",
                        related_name="products_country_specific_batches",
                        to="webhallen.component",
                    ),
                ),
                (
                    "edition",
                    models.ManyToManyField(
                        help_text="Edition",
                        related_name="products_edition",
                        to="webhallen.component",
                    ),
                ),
                (
                    "game_developer",
                    models.ManyToManyField(
                        help_text="Game developer",
                        related_name="products_game_developer",
                        to="webhallen.component",
                    ),
                ),
                (
                    "game_publisher",
                    models.ManyToManyField(
                        help_text="Game publisher",
                        related_name="products_game_publisher",
                        to="webhallen.component",
                    ),
                ),
                (
                    "localization",
                    models.ManyToManyField(
                        help_text="Localization",
                        related_name="products_localization",
                        to="webhallen.component",
                    ),
                ),
                (
                    "manufacturer",
                    models.ManyToManyField(
                        help_text="Manufacturer",
                        related_name="products_manufacturer",
                        to="webhallen.component",
                    ),
                ),
                (
                    "manufacturer_model_number",
                    models.ManyToManyField(
                        help_text="Manufacturer's model number",
                        related_name="products_manufacturer_model_number",
                        to="webhallen.component",
                    ),
                ),
                (
                    "model",
                    models.ManyToManyField(help_text="Model", related_name="products_model", to="webhallen.component"),
                ),
                (
                    "packaged_quantity",
                    models.ManyToManyField(
                        help_text="Packaged quantity",
                        related_name="products_packaged_quantity",
                        to="webhallen.component",
                    ),
                ),
                (
                    "product_line",
                    models.ManyToManyField(
                        help_text="Product line",
                        related_name="products_product_line",
                        to="webhallen.component",
                    ),
                ),
                (
                    "release_date",
                    models.ManyToManyField(
                        help_text="Release date",
                        related_name="products_release_date",
                        to="webhallen.component",
                    ),
                ),
                (
                    "series",
                    models.ManyToManyField(
                        help_text="Series",
                        related_name="products_series",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="HeatingAndCooling",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the heating and cooling was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the heating and cooling was last updated"),
                ),
                (
                    "air_flow",
                    models.ManyToManyField(
                        help_text="Air flow",
                        related_name="heating_and_cooling_air_flow",
                        to="webhallen.component",
                    ),
                ),
                (
                    "air_flow_control",
                    models.ManyToManyField(
                        help_text="Air flow control",
                        related_name="heating_and_cooling_air_flow_control",
                        to="webhallen.component",
                    ),
                ),
                (
                    "container_capacity",
                    models.ManyToManyField(
                        help_text="Container capacity",
                        related_name="heating_and_cooling_container_capacity",
                        to="webhallen.component",
                    ),
                ),
                (
                    "cooling_capacity",
                    models.ManyToManyField(
                        help_text="Cooling capacity",
                        related_name="heating_and_cooling_cooling_capacity",
                        to="webhallen.component",
                    ),
                ),
                (
                    "cooling_capacity_btu_per_hour",
                    models.ManyToManyField(
                        help_text="Cooling capacity (BTU per hour)",
                        related_name="heating_and_cooling_cooling_capacity_btu_per_hour",
                        to="webhallen.component",
                    ),
                ),
                (
                    "environment",
                    models.ManyToManyField(
                        help_text="Environment",
                        related_name="heating_and_cooling_environment",
                        to="webhallen.component",
                    ),
                ),
                (
                    "functions",
                    models.ManyToManyField(
                        help_text="Functions",
                        related_name="heating_and_cooling_functions",
                        to="webhallen.component",
                    ),
                ),
                (
                    "heating_capacity",
                    models.ManyToManyField(
                        help_text="Heating capacity",
                        related_name="heating_and_cooling_heating_capacity",
                        to="webhallen.component",
                    ),
                ),
                (
                    "max_dehumidification_capacity",
                    models.ManyToManyField(
                        help_text="Max dehumidification capacity",
                        related_name="heating_and_cooling_max_dehumidification_capacity",
                        to="webhallen.component",
                    ),
                ),
                (
                    "model",
                    models.ManyToManyField(
                        help_text="Model",
                        related_name="heating_and_cooling_model",
                        to="webhallen.component",
                    ),
                ),
                (
                    "product_type",
                    models.ManyToManyField(
                        help_text="Product type",
                        related_name="heating_and_cooling_product_type",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="HeatsinkAndFan",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the heatsink and fan was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the heatsink and fan was last updated"),
                ),
                (
                    "compatible_with",
                    models.ManyToManyField(
                        help_text="Compatible with",
                        related_name="heatsink_and_fan_compatible_with",
                        to="webhallen.component",
                    ),
                ),
                (
                    "cooler_material",
                    models.ManyToManyField(
                        help_text="Cooler material",
                        related_name="heatsink_and_fan_cooler_material",
                        to="webhallen.component",
                    ),
                ),
                (
                    "fan_diameter",
                    models.ManyToManyField(
                        help_text="Fan diameter",
                        related_name="heatsink_and_fan_fan_diameter",
                        to="webhallen.component",
                    ),
                ),
                (
                    "power_connector",
                    models.ManyToManyField(
                        help_text="Power connector",
                        related_name="heatsink_and_fan_power_connector",
                        to="webhallen.component",
                    ),
                ),
                (
                    "radiator_size",
                    models.ManyToManyField(
                        help_text="Radiator size",
                        related_name="heatsink_and_fan_radiator_size",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="InputDevice",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the input device was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the input device was last updated")),
                (
                    "active_horizontal_area",
                    models.ManyToManyField(
                        help_text="Active horizontal area",
                        related_name="input_device_active_horizontal_area",
                        to="webhallen.component",
                    ),
                ),
                (
                    "active_vertical_area",
                    models.ManyToManyField(
                        help_text="Active vertical area",
                        related_name="input_device_active_vertical_area",
                        to="webhallen.component",
                    ),
                ),
                (
                    "anti_ghosting",
                    models.ManyToManyField(
                        help_text="Anti-ghosting",
                        related_name="input_device_anti_ghosting",
                        to="webhallen.component",
                    ),
                ),
                (
                    "backlight",
                    models.ManyToManyField(
                        help_text="Backlight",
                        related_name="input_device_backlight",
                        to="webhallen.component",
                    ),
                ),
                (
                    "backlit",
                    models.ManyToManyField(
                        help_text="Backlit",
                        related_name="input_device_backlit",
                        to="webhallen.component",
                    ),
                ),
                (
                    "connection_technology",
                    models.ManyToManyField(
                        help_text="Connection technology",
                        related_name="input_device_connection_technology",
                        to="webhallen.component",
                    ),
                ),
                (
                    "ergonomic_design",
                    models.ManyToManyField(
                        help_text="Ergonomic design",
                        related_name="input_device_ergonomic_design",
                        to="webhallen.component",
                    ),
                ),
                (
                    "form_factor",
                    models.ManyToManyField(
                        help_text="Form factor",
                        related_name="input_device_form_factor",
                        to="webhallen.component",
                    ),
                ),
                (
                    "input_adapter_type",
                    models.ManyToManyField(
                        help_text="Input adapter type",
                        related_name="input_device_input_adapter_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "interface",
                    models.ManyToManyField(
                        help_text="Interface",
                        related_name="input_device_interface",
                        to="webhallen.component",
                    ),
                ),
                (
                    "interface_type",
                    models.ManyToManyField(
                        help_text="Interface type",
                        related_name="input_device_interface_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "key_lock_type",
                    models.ManyToManyField(
                        help_text="Key lock type",
                        related_name="input_device_key_lock_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "keyboard_layout",
                    models.ManyToManyField(
                        help_text="Keyboard layout",
                        related_name="input_device_keyboard_layout",
                        to="webhallen.component",
                    ),
                ),
                (
                    "keyboard_localization",
                    models.ManyToManyField(
                        help_text="Keyboard localization",
                        related_name="input_device_keyboard_localization",
                        to="webhallen.component",
                    ),
                ),
                (
                    "keyboard_technology",
                    models.ManyToManyField(
                        help_text="Keyboard technology",
                        related_name="input_device_keyboard_technology",
                        to="webhallen.component",
                    ),
                ),
                (
                    "motion_detection_technology",
                    models.ManyToManyField(
                        help_text="Motion detection technology",
                        related_name="input_device_motion_detection_technology",
                        to="webhallen.component",
                    ),
                ),
                (
                    "motion_resolution",
                    models.ManyToManyField(
                        help_text="Motion resolution",
                        related_name="input_device_motion_resolution",
                        to="webhallen.component",
                    ),
                ),
                (
                    "notebook_mouse",
                    models.ManyToManyField(
                        help_text="Notebook mouse",
                        related_name="input_device_notebook_mouse",
                        to="webhallen.component",
                    ),
                ),
                (
                    "number_of_buttons",
                    models.ManyToManyField(
                        help_text="Number of buttons",
                        related_name="input_device_number_of_buttons",
                        to="webhallen.component",
                    ),
                ),
                (
                    "number_of_simultaneous_keypresses",
                    models.ManyToManyField(
                        help_text="Number of simultaneous keypresses",
                        related_name="input_device_number_of_simultaneous_keypresses",
                        to="webhallen.component",
                    ),
                ),
                (
                    "numeric_keypad",
                    models.ManyToManyField(
                        help_text="Numeric keypad",
                        related_name="input_device_numeric_keypad",
                        to="webhallen.component",
                    ),
                ),
                (
                    "orientation",
                    models.ManyToManyField(
                        help_text="Orientation",
                        related_name="input_device_orientation",
                        to="webhallen.component",
                    ),
                ),
                (
                    "product_type",
                    models.ManyToManyField(
                        help_text="Product type",
                        related_name="input_device_product_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "type",
                    models.ManyToManyField(
                        help_text="Type",
                        related_name="input_device_type",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="InternetOfThings",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the internet of things was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the internet of things was last updated"),
                ),
                (
                    "communication_technology",
                    models.ManyToManyField(
                        help_text="Communication technology",
                        related_name="internet_of_things_communication_technology",
                        to="webhallen.component",
                    ),
                ),
                (
                    "compatible_with_internet_of_things",
                    models.ManyToManyField(
                        help_text="Compatible with Internet of Things",
                        related_name="internet_of_things_compatible_with_internet_of_things",
                        to="webhallen.component",
                    ),
                ),
                (
                    "intelligent_assistant",
                    models.ManyToManyField(
                        help_text="Intelligent assistant",
                        related_name="internet_of_things_intelligent_assistant",
                        to="webhallen.component",
                    ),
                ),
                (
                    "platform",
                    models.ManyToManyField(
                        help_text="Platform",
                        related_name="internet_of_things_platform",
                        to="webhallen.component",
                    ),
                ),
                (
                    "voice_controlled",
                    models.ManyToManyField(
                        help_text="Voice controlled",
                        related_name="internet_of_things_voice_controlled",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="LightSource",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the light source was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the light source was last updated")),
                (
                    "beam_angle",
                    models.ManyToManyField(
                        help_text="Beam angle",
                        related_name="light_source_beam_angle",
                        to="webhallen.component",
                    ),
                ),
                (
                    "color_rendering_index",
                    models.ManyToManyField(
                        help_text="Color rendering index",
                        related_name="light_source_color_rendering_index",
                        to="webhallen.component",
                    ),
                ),
                (
                    "color_temperature",
                    models.ManyToManyField(
                        help_text="Color temperature",
                        related_name="light_source_color_temperature",
                        to="webhallen.component",
                    ),
                ),
                (
                    "dimmable",
                    models.ManyToManyField(
                        help_text="Dimmable",
                        related_name="light_source_dimmable",
                        to="webhallen.component",
                    ),
                ),
                (
                    "energy_efficiency_class",
                    models.ManyToManyField(
                        help_text="Energy efficiency class",
                        related_name="light_source_energy_efficiency_class",
                        to="webhallen.component",
                    ),
                ),
                (
                    "illumination_color",
                    models.ManyToManyField(
                        help_text="Illumination color",
                        related_name="light_source_illumination_color",
                        to="webhallen.component",
                    ),
                ),
                (
                    "lamp_current",
                    models.ManyToManyField(
                        help_text="Lamp current",
                        related_name="light_source_lamp_current",
                        to="webhallen.component",
                    ),
                ),
                (
                    "lifespan",
                    models.ManyToManyField(
                        help_text="Lifespan",
                        related_name="light_source_lifespan",
                        to="webhallen.component",
                    ),
                ),
                (
                    "luminous_efficiency",
                    models.ManyToManyField(
                        help_text="Luminous efficiency",
                        related_name="light_source_luminous_efficiency",
                        to="webhallen.component",
                    ),
                ),
                (
                    "luminous_flux",
                    models.ManyToManyField(
                        help_text="Luminous flux",
                        related_name="light_source_luminous_flux",
                        to="webhallen.component",
                    ),
                ),
                (
                    "mercury_content",
                    models.ManyToManyField(
                        help_text="Mercury content",
                        related_name="light_source_mercury_content",
                        to="webhallen.component",
                    ),
                ),
                (
                    "power_factor",
                    models.ManyToManyField(
                        help_text="Power factor",
                        related_name="light_source_power_factor",
                        to="webhallen.component",
                    ),
                ),
                (
                    "shape",
                    models.ManyToManyField(
                        help_text="Shape",
                        related_name="light_source_shape",
                        to="webhallen.component",
                    ),
                ),
                (
                    "socket_type",
                    models.ManyToManyField(
                        help_text="Socket type",
                        related_name="light_source_socket_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "start_time",
                    models.ManyToManyField(
                        help_text="Start time",
                        related_name="light_source_start_time",
                        to="webhallen.component",
                    ),
                ),
                (
                    "type_of_light_source",
                    models.ManyToManyField(
                        help_text="Type of light source",
                        related_name="light_source_type_of_light_source",
                        to="webhallen.component",
                    ),
                ),
                (
                    "warm_up_time",
                    models.ManyToManyField(
                        help_text="Warm-up time",
                        related_name="light_source_warm_up_time",
                        to="webhallen.component",
                    ),
                ),
                (
                    "watt_equivalence",
                    models.ManyToManyField(
                        help_text="Watt equivalence",
                        related_name="light_source_watt_equivalence",
                        to="webhallen.component",
                    ),
                ),
                (
                    "wattage",
                    models.ManyToManyField(
                        help_text="Wattage",
                        related_name="light_source_wattage",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="MemoryAdapter",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the memory adapter was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the memory adapter was last updated"),
                ),
                (
                    "device_type",
                    models.ManyToManyField(
                        help_text="Device type",
                        related_name="memory_adapter_device_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "interface",
                    models.ManyToManyField(
                        help_text="Interface",
                        related_name="memory_adapter_interface",
                        to="webhallen.component",
                    ),
                ),
                (
                    "model",
                    models.ManyToManyField(
                        help_text="Model",
                        related_name="memory_adapter_model",
                        to="webhallen.component",
                    ),
                ),
                (
                    "support_for_memory_cards",
                    models.ManyToManyField(
                        help_text="Support for memory cards",
                        related_name="memory_adapter_support_for_memory_cards",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="MemoryModule",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the memory module was created")),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the memory module was last updated"),
                ),
                (
                    "quantity_in_kit",
                    models.ManyToManyField(
                        help_text="Quantity in kit",
                        related_name="memory_module_quantity_in_kit",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Meta",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the meta was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the meta was last updated")),
                ("highlight_member_offer", models.BooleanField(help_text="Highlight member offer")),
                ("is_hygiene_article", models.BooleanField(help_text="Is hygiene article")),
                ("requires_prepayment", models.TextField(help_text="Requires prepayment")),
                (
                    "excluded_shipping_methods",
                    models.ManyToManyField(help_text="Excluded shipping methods", to="webhallen.excludeshippingmethod"),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Miscellaneous",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the miscellaneous information was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When the miscellaneous information was last updated",
                    ),
                ),
                (
                    "ai_ready",
                    models.ManyToManyField(
                        help_text="AI ready",
                        related_name="miscellaneous_ai_ready",
                        to="webhallen.component",
                    ),
                ),
                (
                    "capacity",
                    models.ManyToManyField(
                        help_text="Capacity",
                        related_name="miscellaneous_capacity",
                        to="webhallen.component",
                    ),
                ),
                (
                    "coffee_maker_accessories",
                    models.ManyToManyField(
                        help_text="Coffee maker accessories",
                        related_name="miscellaneous_coffee_maker_accessories",
                        to="webhallen.component",
                    ),
                ),
                (
                    "color",
                    models.ManyToManyField(
                        help_text="Color",
                        related_name="miscellaneous_color",
                        to="webhallen.component",
                    ),
                ),
                (
                    "color_category",
                    models.ManyToManyField(
                        help_text="Color category",
                        related_name="miscellaneous_color_category",
                        to="webhallen.component",
                    ),
                ),
                (
                    "compatible_game_console",
                    models.ManyToManyField(
                        help_text="Compatible game console",
                        related_name="miscellaneous_compatible_game_console",
                        to="webhallen.component",
                    ),
                ),
                (
                    "cordless_use",
                    models.ManyToManyField(
                        help_text="Cordless use",
                        related_name="miscellaneous_cordless_use",
                        to="webhallen.component",
                    ),
                ),
                (
                    "design_features",
                    models.ManyToManyField(
                        help_text="Design features",
                        related_name="miscellaneous_design_features",
                        to="webhallen.component",
                    ),
                ),
                (
                    "encryption_algorithm",
                    models.ManyToManyField(
                        help_text="Encryption algorithm",
                        related_name="miscellaneous_encryption_algorithm",
                        to="webhallen.component",
                    ),
                ),
                (
                    "external_color",
                    models.ManyToManyField(
                        help_text="External color",
                        related_name="miscellaneous_external_color",
                        to="webhallen.component",
                    ),
                ),
                (
                    "features",
                    models.ManyToManyField(
                        help_text="Features",
                        related_name="miscellaneous_features",
                        to="webhallen.component",
                    ),
                ),
                (
                    "finish",
                    models.ManyToManyField(
                        help_text="Finish",
                        related_name="miscellaneous_finish",
                        to="webhallen.component",
                    ),
                ),
                (
                    "flat_screen_mounting_interface",
                    models.ManyToManyField(
                        help_text="Flat screen mounting interface",
                        related_name="miscellaneous_flat_screen_mounting_interface",
                        to="webhallen.component",
                    ),
                ),
                (
                    "for_underwater_use",
                    models.ManyToManyField(
                        help_text="For underwater use",
                        related_name="miscellaneous_for_underwater_use",
                        to="webhallen.component",
                    ),
                ),
                (
                    "gaming",
                    models.ManyToManyField(
                        help_text="Gaming",
                        related_name="miscellaneous_gaming",
                        to="webhallen.component",
                    ),
                ),
                (
                    "hard_drive_compatible_form_factor_metric",
                    models.ManyToManyField(
                        help_text="HDD compatible form factor metric",
                        related_name="miscellaneous_hard_drive_compatible_form_factor_metric",
                        to="webhallen.component",
                    ),
                ),
                (
                    "hard_drive_form_factor_compatibility",
                    models.ManyToManyField(
                        help_text="HDD form factor compatibility",
                        related_name="miscellaneous_hard_drive_form_factor_compatibility",
                        to="webhallen.component",
                    ),
                ),
                (
                    "included_accessories",
                    models.ManyToManyField(
                        help_text="Included accessories",
                        related_name="miscellaneous_included_accessories",
                        to="webhallen.component",
                    ),
                ),
                (
                    "manufacturer_sales_program",
                    models.ManyToManyField(
                        help_text="Manufacturer sales program",
                        related_name="miscellaneous_manufacturer_sales_program",
                        to="webhallen.component",
                    ),
                ),
                (
                    "material",
                    models.ManyToManyField(
                        help_text="Material",
                        related_name="miscellaneous_material",
                        to="webhallen.component",
                    ),
                ),
                (
                    "max_depth_for_water_resistance",
                    models.ManyToManyField(
                        help_text="Max depth for water resistance",
                        related_name="miscellaneous_max_depth_for_water_resistance",
                        to="webhallen.component",
                    ),
                ),
                (
                    "max_load",
                    models.ManyToManyField(
                        help_text="Max load",
                        related_name="miscellaneous_max_load",
                        to="webhallen.component",
                    ),
                ),
                (
                    "noise_class",
                    models.ManyToManyField(
                        help_text="Noise class",
                        related_name="miscellaneous_noise_class",
                        to="webhallen.component",
                    ),
                ),
                (
                    "operating_time_without_power_connection",
                    models.ManyToManyField(
                        help_text="Operating time without power connection",
                        related_name="miscellaneous_operating_time_without_power_connection",
                        to="webhallen.component",
                    ),
                ),
                (
                    "package_type",
                    models.ManyToManyField(
                        help_text="Package type",
                        related_name="miscellaneous_package_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "packaging_type",
                    models.ManyToManyField(
                        help_text="Packaging type",
                        related_name="miscellaneous_packaging_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "pricing_type",
                    models.ManyToManyField(
                        help_text="Pricing type",
                        related_name="miscellaneous_pricing_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "processor_package",
                    models.ManyToManyField(
                        help_text="Processor package",
                        related_name="miscellaneous_processor_package",
                        to="webhallen.component",
                    ),
                ),
                (
                    "product_condition",
                    models.ManyToManyField(
                        help_text="Product condition",
                        related_name="miscellaneous_product_condition",
                        to="webhallen.component",
                    ),
                ),
                (
                    "product_material",
                    models.ManyToManyField(
                        help_text="Product material",
                        related_name="miscellaneous_product_material",
                        to="webhallen.component",
                    ),
                ),
                (
                    "product_type",
                    models.ManyToManyField(
                        help_text="Product type",
                        related_name="miscellaneous_product_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "protection",
                    models.ManyToManyField(
                        help_text="Protection",
                        related_name="miscellaneous_protection",
                        to="webhallen.component",
                    ),
                ),
                (
                    "rack_mounting_kit",
                    models.ManyToManyField(
                        help_text="Rack mounting kit",
                        related_name="miscellaneous_rack_mounting_kit",
                        to="webhallen.component",
                    ),
                ),
                (
                    "recycled_packaging_content",
                    models.ManyToManyField(
                        help_text="Recycled packaging content",
                        related_name="miscellaneous_recycled_packaging_content",
                        to="webhallen.component",
                    ),
                ),
                (
                    "recycled_packaging_content_comment",
                    models.ManyToManyField(
                        help_text="Recycled packaging content comment",
                        related_name="miscellaneous_recycled_packaging_content_comment",
                        to="webhallen.component",
                    ),
                ),
                (
                    "recycled_product_content",
                    models.ManyToManyField(
                        help_text="Recycled product content",
                        related_name="miscellaneous_recycled_product_content",
                        to="webhallen.component",
                    ),
                ),
                (
                    "recycled_product_content_comment",
                    models.ManyToManyField(
                        help_text="Recycled product content comment",
                        related_name="miscellaneous_recycled_product_content_comment",
                        to="webhallen.component",
                    ),
                ),
                (
                    "reparability_index",
                    models.ManyToManyField(
                        help_text="Reparability index",
                        related_name="miscellaneous_reparability_index",
                        to="webhallen.component",
                    ),
                ),
                (
                    "rugged_design",
                    models.ManyToManyField(
                        help_text="Rugged design",
                        related_name="miscellaneous_rugged_design",
                        to="webhallen.component",
                    ),
                ),
                (
                    "software_certification",
                    models.ManyToManyField(
                        help_text="Software certification",
                        related_name="miscellaneous_software_certification",
                        to="webhallen.component",
                    ),
                ),
                (
                    "sound_level",
                    models.ManyToManyField(
                        help_text="Sound level",
                        related_name="miscellaneous_sound_level",
                        to="webhallen.component",
                    ),
                ),
                (
                    "sound_pressure_level",
                    models.ManyToManyField(
                        help_text="Sound pressure level",
                        related_name="miscellaneous_sound_pressure_level",
                        to="webhallen.component",
                    ),
                ),
                (
                    "standards_followed",
                    models.ManyToManyField(
                        help_text="Standards followed",
                        related_name="miscellaneous_standards_followed",
                        to="webhallen.component",
                    ),
                ),
                (
                    "waterproof",
                    models.ManyToManyField(
                        help_text="Waterproof",
                        related_name="miscellaneous_waterproof",
                        to="webhallen.component",
                    ),
                ),
                (
                    "works_with_chromebook",
                    models.ManyToManyField(
                        help_text="Works with Chromebook",
                        related_name="miscellaneous_works_with_chromebook",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="MobileBroadband",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the mobile broadband was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the mobile broadband was last updated"),
                ),
                (
                    "cellular_protocol",
                    models.ManyToManyField(
                        help_text="Cellular protocol",
                        related_name="mobile_broadband_cellular_protocol",
                        to="webhallen.component",
                    ),
                ),
                (
                    "generation",
                    models.ManyToManyField(
                        help_text="Generation",
                        related_name="mobile_broadband_generation",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Modem",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the modem was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the modem was last updated")),
                ("band", models.ManyToManyField(help_text="Band", related_name="modem_band", to="webhallen.component")),
                (
                    "broadband_access_for_mobile_phone",
                    models.ManyToManyField(
                        help_text="Broadband access for mobile phone",
                        related_name="modem_broadband_access_for_mobile_phone",
                        to="webhallen.component",
                    ),
                ),
                (
                    "connection_technology",
                    models.ManyToManyField(
                        help_text="Connection technology",
                        related_name="modem_connection_technology",
                        to="webhallen.component",
                    ),
                ),
                (
                    "form_factor",
                    models.ManyToManyField(
                        help_text="Form factor",
                        related_name="modem_form_factor",
                        to="webhallen.component",
                    ),
                ),
                (
                    "max_transfer_rate",
                    models.ManyToManyField(
                        help_text="Max transfer rate",
                        related_name="modem_max_transfer_rate",
                        to="webhallen.component",
                    ),
                ),
                ("type", models.ManyToManyField(help_text="Type", related_name="modem_type", to="webhallen.component")),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Network",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the network was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the network was last updated")),
                (
                    "ac_standard",
                    models.ManyToManyField(
                        help_text="AC standard",
                        related_name="network_ac_standard",
                        to="webhallen.component",
                    ),
                ),
                (
                    "advanced_switching",
                    models.ManyToManyField(
                        help_text="Advanced switching",
                        related_name="network_advanced_switching",
                        to="webhallen.component",
                    ),
                ),
                (
                    "builtin_switch",
                    models.ManyToManyField(
                        help_text="Built-in switch",
                        related_name="network_builtin_switch",
                        to="webhallen.component",
                    ),
                ),
                (
                    "cloud_managed",
                    models.ManyToManyField(
                        help_text="Cloud managed",
                        related_name="network_cloud_managed",
                        to="webhallen.component",
                    ),
                ),
                (
                    "connection_technology",
                    models.ManyToManyField(
                        help_text="Connection technology",
                        related_name="network_connection_technology",
                        to="webhallen.component",
                    ),
                ),
                (
                    "data_link_protocol",
                    models.ManyToManyField(
                        help_text="Data link protocol",
                        related_name="network_data_link_protocol",
                        to="webhallen.component",
                    ),
                ),
                (
                    "data_transfer_speed",
                    models.ManyToManyField(
                        help_text="Data transfer speed",
                        related_name="network_data_transfer_speed",
                        to="webhallen.component",
                    ),
                ),
                (
                    "form_factor",
                    models.ManyToManyField(
                        help_text="Form factor",
                        related_name="network_form_factor",
                        to="webhallen.component",
                    ),
                ),
                (
                    "image_transfer_protocol_for_lan_and_wireless",
                    models.ManyToManyField(
                        help_text="Image transfer protocol for LAN and wireless",
                        related_name="network_image_transfer_protocol_for_lan_and_wireless",
                        to="webhallen.component",
                    ),
                ),
                (
                    "important_functions",
                    models.ManyToManyField(
                        help_text="Important functions",
                        related_name="network_important_functions",
                        to="webhallen.component",
                    ),
                ),
                (
                    "interface_type_bus",
                    models.ManyToManyField(
                        help_text="Interface type bus",
                        related_name="network_interface_type_bus",
                        to="webhallen.component",
                    ),
                ),
                (
                    "jumbo_frame_support",
                    models.ManyToManyField(
                        help_text="Jumbo frame support",
                        related_name="network_jumbo_frame_support",
                        to="webhallen.component",
                    ),
                ),
                (
                    "lan_presentation_and_wireless_d_o",
                    models.ManyToManyField(
                        help_text="LAN presentation and wireless D/O",
                        related_name="network_lan_presentation_and_wireless_d_o",
                        to="webhallen.component",
                    ),
                ),
                (
                    "managed",
                    models.ManyToManyField(
                        help_text="Managed",
                        related_name="network_managed",
                        to="webhallen.component",
                    ),
                ),
                (
                    "max_area_indoor",
                    models.ManyToManyField(
                        help_text="Max area indoor",
                        related_name="network_max_area_indoor",
                        to="webhallen.component",
                    ),
                ),
                (
                    "network_interface",
                    models.ManyToManyField(
                        help_text="Network interface",
                        related_name="network_network_interface",
                        to="webhallen.component",
                    ),
                ),
                (
                    "network_protocol",
                    models.ManyToManyField(
                        help_text="Network protocol",
                        related_name="network_network_protocol",
                        to="webhallen.component",
                    ),
                ),
                (
                    "network_transport_protocol",
                    models.ManyToManyField(
                        help_text="Network transport protocol",
                        related_name="network_transport_protocol",
                        to="webhallen.component",
                    ),
                ),
                (
                    "number_of_ports",
                    models.ManyToManyField(
                        help_text="Number of ports",
                        related_name="network_number_of_ports",
                        to="webhallen.component",
                    ),
                ),
                (
                    "number_of_wan_ports",
                    models.ManyToManyField(
                        help_text="Number of WAN ports",
                        related_name="network_number_of_wan_ports",
                        to="webhallen.component",
                    ),
                ),
                (
                    "power_over_ethernet",
                    models.ManyToManyField(
                        help_text="Power over Ethernet",
                        related_name="network_power_over_ethernet",
                        to="webhallen.component",
                    ),
                ),
                (
                    "remote_administration_protocol",
                    models.ManyToManyField(
                        help_text="Remote administration protocol",
                        related_name="network_remote_administration_protocol",
                        to="webhallen.component",
                    ),
                ),
                (
                    "remote_management_interface",
                    models.ManyToManyField(
                        help_text="Remote management interface",
                        related_name="network_remote_management_interface",
                        to="webhallen.component",
                    ),
                ),
                (
                    "subcategory",
                    models.ManyToManyField(
                        help_text="Subcategory",
                        related_name="network_subcategory",
                        to="webhallen.component",
                    ),
                ),
                (
                    "subtype",
                    models.ManyToManyField(
                        help_text="Subtype",
                        related_name="network_subtype",
                        to="webhallen.component",
                    ),
                ),
                (
                    "support_for_wireless_lan",
                    models.ManyToManyField(
                        help_text="Support for wireless LAN",
                        related_name="network_support_for_wireless_lan",
                        to="webhallen.component",
                    ),
                ),
                (
                    "type",
                    models.ManyToManyField(help_text="Type", related_name="network_type", to="webhallen.component"),
                ),
                (
                    "type_of_cabling",
                    models.ManyToManyField(
                        help_text="Type of cabling",
                        related_name="network_type_of_cabling",
                        to="webhallen.component",
                    ),
                ),
                (
                    "wire_protocol",
                    models.ManyToManyField(
                        help_text="Wire protocol",
                        related_name="network_wire_protocol",
                        to="webhallen.component",
                    ),
                ),
                (
                    "wireless_connection",
                    models.ManyToManyField(
                        help_text="Wireless connection",
                        related_name="network_wireless_connection",
                        to="webhallen.component",
                    ),
                ),
                (
                    "wireless_protocol",
                    models.ManyToManyField(
                        help_text="Wireless protocol",
                        related_name="network_wireless_protocol",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="OpticalStorage",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the optical storage was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the optical storage was last updated"),
                ),
                (
                    "buffer_size",
                    models.ManyToManyField(
                        help_text="Buffer size",
                        related_name="optical_storage_buffer_size",
                        to="webhallen.component",
                    ),
                ),
                (
                    "device_type",
                    models.ManyToManyField(
                        help_text="Device type",
                        related_name="optical_storage_device_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "read_speed",
                    models.ManyToManyField(
                        help_text="Read speed",
                        related_name="optical_storage_read_speed",
                        to="webhallen.component",
                    ),
                ),
                (
                    "rewrite_speed",
                    models.ManyToManyField(
                        help_text="Rewrite speed",
                        related_name="optical_storage_rewrite_speed",
                        to="webhallen.component",
                    ),
                ),
                (
                    "type",
                    models.ManyToManyField(
                        help_text="Type",
                        related_name="optical_storage_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "write_speed",
                    models.ManyToManyField(
                        help_text="Write speed",
                        related_name="optical_storage_write_speed",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="OpticalStorageSecondary",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the optical storage secondary was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When the optical storage secondary was last updated",
                    ),
                ),
                (
                    "type",
                    models.ManyToManyField(
                        help_text="Type",
                        related_name="optical_storage_secondary_type",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name="component",
            name="parts",
            field=models.ManyToManyField(help_text="Parts", related_name="components", to="webhallen.parts"),
        ),
        migrations.CreateModel(
            name="PersonalHygiene",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the personal hygiene was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the personal hygiene was last updated"),
                ),
                (
                    "category",
                    models.ManyToManyField(
                        help_text="Category",
                        related_name="personal_hygiene_category",
                        to="webhallen.component",
                    ),
                ),
                (
                    "number_of_speed_settings",
                    models.ManyToManyField(
                        help_text="Number of speed settings",
                        related_name="personal_hygiene_number_of_speed_settings",
                        to="webhallen.component",
                    ),
                ),
                (
                    "product_type",
                    models.ManyToManyField(
                        help_text="Product type",
                        related_name="personal_hygiene_product_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "usage",
                    models.ManyToManyField(
                        help_text="Usage",
                        related_name="personal_hygiene_usage",
                        to="webhallen.component",
                    ),
                ),
                (
                    "vibrations_per_minute",
                    models.ManyToManyField(
                        help_text="Vibrations per minute",
                        related_name="personal_hygiene_vibrations_per_minute",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="PortableStorageSolution",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the portable storage solution was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When the portable storage solution was last updated",
                    ),
                ),
                (
                    "type",
                    models.ManyToManyField(
                        help_text="Type",
                        related_name="portable_storage_solution_type",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Power",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the power was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the power was last updated")),
                (
                    "ampere_capacity",
                    models.ManyToManyField(
                        help_text="https://en.wikipedia.org/wiki/Ampacity",
                        related_name="power_ampere_capacity",
                        to="webhallen.component",
                    ),
                ),
                (
                    "battery_charge",
                    models.ManyToManyField(
                        help_text="Battery charge",
                        related_name="power_battery_charge",
                        to="webhallen.component",
                    ),
                ),
                (
                    "energy_class",
                    models.ManyToManyField(
                        help_text="Energy class",
                        related_name="power_energy_class",
                        to="webhallen.component",
                    ),
                ),
                (
                    "energy_class_hdr",
                    models.ManyToManyField(
                        help_text="Energy class HDR",
                        related_name="power_energy_class_hdr",
                        to="webhallen.component",
                    ),
                ),
                (
                    "energy_consumption_per_year",
                    models.ManyToManyField(
                        help_text="Energy consumption per year",
                        related_name="power_energy_consumption_per_year",
                        to="webhallen.component",
                    ),
                ),
                (
                    "energy_efficiency_ratio",
                    models.ManyToManyField(
                        help_text="EER (Energy Efficiency Ratio)",
                        related_name="power_energy_efficiency_ratio",
                        to="webhallen.component",
                    ),
                ),
                (
                    "on_off_switch",
                    models.ManyToManyField(
                        help_text="On/off switch",
                        related_name="power_on_off_switch",
                        to="webhallen.component",
                    ),
                ),
                (
                    "operation",
                    models.ManyToManyField(
                        help_text="Operation",
                        related_name="power_operation",
                        to="webhallen.component",
                    ),
                ),
                (
                    "operation_time_without_mains",
                    models.ManyToManyField(
                        help_text="Operation time without mains",
                        related_name="power_operation_time_without_mains",
                        to="webhallen.component",
                    ),
                ),
                (
                    "power_consumption",
                    models.ManyToManyField(
                        help_text="Power consumption",
                        related_name="power_power_consumption",
                        to="webhallen.component",
                    ),
                ),
                (
                    "power_consumption_hdr_on_mode",
                    models.ManyToManyField(
                        help_text="Power consumption HDR on mode",
                        related_name="power_power_consumption_hdr_on_mode",
                        to="webhallen.component",
                    ),
                ),
                (
                    "power_consumption_operating_mode",
                    models.ManyToManyField(
                        help_text="Power consumption operating mode",
                        related_name="power_power_consumption_operating_mode",
                        to="webhallen.component",
                    ),
                ),
                (
                    "power_source",
                    models.ManyToManyField(
                        help_text="Power source",
                        related_name="power_power_source",
                        to="webhallen.component",
                    ),
                ),
                (
                    "voltage",
                    models.ManyToManyField(help_text="Voltage", related_name="power_voltage", to="webhallen.component"),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="PowerSupply",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the power supply was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the power supply was last updated")),
                (
                    "alternative",
                    models.ManyToManyField(
                        help_text="Alternative",
                        related_name="power_supply_alternative",
                        to="webhallen.component",
                    ),
                ),
                (
                    "capacity_va",
                    models.ManyToManyField(
                        help_text="Capacity (VA)",
                        related_name="power_supply_capacity_va",
                        to="webhallen.component",
                    ),
                ),
                (
                    "cooling_system",
                    models.ManyToManyField(
                        help_text="Cooling system",
                        related_name="power_supply_cooling_system",
                        to="webhallen.component",
                    ),
                ),
                (
                    "cord_length",
                    models.ManyToManyField(
                        help_text="Cord length",
                        related_name="power_supply_cord_length",
                        to="webhallen.component",
                    ),
                ),
                (
                    "demanded_frequency",
                    models.ManyToManyField(
                        help_text="Required frequency",
                        related_name="power_supply_demanded_frequency",
                        to="webhallen.component",
                    ),
                ),
                (
                    "demanded_voltage",
                    models.ManyToManyField(
                        help_text="Required voltage",
                        related_name="power_supply_demanded_voltage",
                        to="webhallen.component",
                    ),
                ),
                (
                    "energy_consumption_during_operation",
                    models.ManyToManyField(
                        help_text="Energy consumption during operation",
                        related_name="power_supply_energy_consumption_during_operation",
                        to="webhallen.component",
                    ),
                ),
                (
                    "form_factor",
                    models.ManyToManyField(
                        help_text="Form factor",
                        related_name="power_supply_form_factor",
                        to="webhallen.component",
                    ),
                ),
                (
                    "mains_voltage",
                    models.ManyToManyField(
                        help_text="Mains voltage",
                        related_name="power_supply_mains_voltage",
                        to="webhallen.component",
                    ),
                ),
                (
                    "max_electric_current",
                    models.ManyToManyField(
                        help_text="Max electric current",
                        related_name="power_supply_max_electric_current",
                        to="webhallen.component",
                    ),
                ),
                (
                    "modular_cable_management",
                    models.ManyToManyField(
                        help_text="Modular cable management",
                        related_name="power_supply_modular_cable_management",
                        to="webhallen.component",
                    ),
                ),
                (
                    "number_of_outlets",
                    models.ManyToManyField(
                        help_text="Number of outlets",
                        related_name="power_supply_number_of_outlets",
                        to="webhallen.component",
                    ),
                ),
                (
                    "power",
                    models.ManyToManyField(
                        help_text="Power",
                        related_name="power_supply_power",
                        to="webhallen.component",
                    ),
                ),
                (
                    "power_source",
                    models.ManyToManyField(
                        help_text="Power source",
                        related_name="power_supply_power_source",
                        to="webhallen.component",
                    ),
                ),
                (
                    "power_supply_compatibility",
                    models.ManyToManyField(
                        help_text="Power supply compatibility",
                        related_name="power_supply_power_supply_compatibility",
                        to="webhallen.component",
                    ),
                ),
                (
                    "required_frequency",
                    models.ManyToManyField(
                        help_text="Required frequency",
                        related_name="power_supply_required_frequency",
                        to="webhallen.component",
                    ),
                ),
                (
                    "supplied_voltage",
                    models.ManyToManyField(
                        help_text="Supplied voltage",
                        related_name="power_supply_supplied_voltage",
                        to="webhallen.component",
                    ),
                ),
                (
                    "the_80_plus_certification",
                    models.ManyToManyField(
                        help_text="The 80 PLUS certification",
                        related_name="power_supply_the_80_plus_certification",
                        to="webhallen.component",
                    ),
                ),
                (
                    "type",
                    models.ManyToManyField(
                        help_text="Type",
                        related_name="power_supply_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "type_of_input_connector",
                    models.ManyToManyField(
                        help_text="Type of input connector",
                        related_name="power_supply_type_of_input_connector",
                        to="webhallen.component",
                    ),
                ),
                (
                    "type_of_output_contact",
                    models.ManyToManyField(
                        help_text="Type of output contact",
                        related_name="power_supply_type_of_output_contact",
                        to="webhallen.component",
                    ),
                ),
                (
                    "ups_technology",
                    models.ManyToManyField(
                        help_text="UPS technology",
                        related_name="power_supply_ups_technology",
                        to="webhallen.component",
                    ),
                ),
                (
                    "voltage_dissipation",
                    models.ManyToManyField(
                        help_text="Voltage dissipation",
                        related_name="power_supply_voltage_dissipation",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="RadioSystem",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the radio system was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the radio system was last updated")),
                (
                    "number_of_presets",
                    models.ManyToManyField(
                        help_text="Number of presets",
                        related_name="radio_system_number_of_presets",
                        to="webhallen.component",
                    ),
                ),
                (
                    "receiver_band",
                    models.ManyToManyField(
                        help_text="Receiver band",
                        related_name="radio_system_receiver_band",
                        to="webhallen.component",
                    ),
                ),
                (
                    "receiver_type",
                    models.ManyToManyField(
                        help_text="Receiver type",
                        related_name="radio_system_receiver_type",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="RAM",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the RAM was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the RAM was last updated")),
                (
                    "adaptation_to_memory_specifications",
                    models.ManyToManyField(
                        help_text="Adaptation to memory specifications",
                        related_name="ram_adaptation_to_memory_specifications",
                        to="webhallen.component",
                    ),
                ),
                (
                    "cas_latency",
                    models.ManyToManyField(
                        help_text="CAS latency",
                        related_name="ram_cas_latency",
                        to="webhallen.component",
                    ),
                ),
                (
                    "data_integrity_check",
                    models.ManyToManyField(
                        help_text="Data integrity check",
                        related_name="ram_data_integrity_check",
                        to="webhallen.component",
                    ),
                ),
                (
                    "empty_slots",
                    models.ManyToManyField(
                        help_text="Empty slots",
                        related_name="ram_empty_slots",
                        to="webhallen.component",
                    ),
                ),
                (
                    "form_factor",
                    models.ManyToManyField(
                        help_text="Form factor",
                        related_name="ram_form_factor",
                        to="webhallen.component",
                    ),
                ),
                (
                    "internal_memory_ram",
                    models.ManyToManyField(
                        help_text="Internal memory (RAM)",
                        related_name="ram_internal_memory_ram",
                        to="webhallen.component",
                    ),
                ),
                (
                    "low_profile",
                    models.ManyToManyField(
                        help_text="Low profile",
                        related_name="ram_low_profile",
                        to="webhallen.component",
                    ),
                ),
                (
                    "max_size_supported",
                    models.ManyToManyField(
                        help_text="Max size supported",
                        related_name="ram_max_size_supported",
                        to="webhallen.component",
                    ),
                ),
                (
                    "memory_size",
                    models.ManyToManyField(
                        help_text="Frame size",
                        related_name="ram_memory_size",
                        to="webhallen.component",
                    ),
                ),
                (
                    "memory_speed",
                    models.ManyToManyField(
                        help_text="Memory speed",
                        related_name="ram_memory_speed",
                        to="webhallen.component",
                    ),
                ),
                (
                    "number_of_slots",
                    models.ManyToManyField(
                        help_text="Number of slots",
                        related_name="ram_number_of_slots",
                        to="webhallen.component",
                    ),
                ),
                (
                    "product_type",
                    models.ManyToManyField(
                        help_text="Product type",
                        related_name="ram_product_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "properties",
                    models.ManyToManyField(
                        help_text="Properties",
                        related_name="ram_properties",
                        to="webhallen.component",
                    ),
                ),
                (
                    "ram_technology",
                    models.ManyToManyField(
                        help_text="RAM technology",
                        related_name="ram_ram_technology",
                        to="webhallen.component",
                    ),
                ),
                (
                    "registered_or_buffered",
                    models.ManyToManyField(
                        help_text="Registered or buffered",
                        related_name="ram_registered_or_buffered",
                        to="webhallen.component",
                    ),
                ),
                (
                    "storage_capacity",
                    models.ManyToManyField(
                        help_text="Storage capacity",
                        related_name="ram_storage_capacity",
                        to="webhallen.component",
                    ),
                ),
                ("type", models.ManyToManyField(help_text="Type", related_name="ram_type", to="webhallen.component")),
                (
                    "upgrade_type",
                    models.ManyToManyField(
                        help_text="Upgrade type",
                        related_name="ram_upgrade_type",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="RemoteControl",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the remote control was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the remote control was last updated"),
                ),
                (
                    "max_working_distance",
                    models.ManyToManyField(
                        help_text="Max working distance",
                        related_name="remote_control_max_working_distance",
                        to="webhallen.component",
                    ),
                ),
                (
                    "number_of_devices_supported",
                    models.ManyToManyField(
                        help_text="Number of devices supported",
                        related_name="remote_control_number_of_devices_supported",
                        to="webhallen.component",
                    ),
                ),
                (
                    "remote_control_technology",
                    models.ManyToManyField(
                        help_text="Remote control technology",
                        related_name="remote_control_technology",
                        to="webhallen.component",
                    ),
                ),
                (
                    "supported_devices",
                    models.ManyToManyField(
                        help_text="Supported devices",
                        related_name="remote_control_supported_devices",
                        to="webhallen.component",
                    ),
                ),
                (
                    "type",
                    models.ManyToManyField(
                        help_text="Type",
                        related_name="remote_control_type",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ReviewHighlightProduct",
            fields=[
                (
                    "id",
                    models.PositiveBigIntegerField(
                        help_text="Review highlight product ID",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the review highlight product was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the review highlight product was last updated"),
                ),
                ("minimum_rank_level", models.PositiveBigIntegerField(help_text="Minimum rank level")),
                ("meta_title", models.TextField(help_text="Meta title")),
                ("name", models.TextField(help_text="Name")),
                (
                    "main_category_path",
                    models.ForeignKey(
                        help_text="Main category path",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webhallen.maincategorypath",
                    ),
                ),
                (
                    "section",
                    models.ForeignKey(
                        help_text="Section",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webhallen.section",
                    ),
                ),
                ("status_codes", models.ManyToManyField(help_text="Status codes", to="webhallen.statuscode")),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Scale",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the scale was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the scale was last updated")),
                (
                    "bathroom_scale_type",
                    models.ManyToManyField(
                        help_text="Bathroom scale type",
                        related_name="scale_bathroom_scale_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "kitchen_scale_type",
                    models.ManyToManyField(
                        help_text="Kitchen scale type",
                        related_name="scale_kitchen_scale_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "max_weight",
                    models.ManyToManyField(
                        help_text="Max weight",
                        related_name="scale_max_weight",
                        to="webhallen.component",
                    ),
                ),
                (
                    "measurement_functions",
                    models.ManyToManyField(
                        help_text="Measurement functions",
                        related_name="scale_measurement_functions",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ServiceAndSupport",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the service and support was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the service and support was last updated"),
                ),
                (
                    "service_and_support",
                    models.ManyToManyField(help_text="Service and support", to="webhallen.component"),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="SettingsControlsAndIndicators",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When the settings, controls and indicators was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When the settings, controls and indicators was last updated",
                    ),
                ),
                (
                    "control_type",
                    models.ManyToManyField(
                        help_text="Control type",
                        related_name="settings_controls_and_indicators_control_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "controls_on_handle",
                    models.ManyToManyField(
                        help_text="Controls on handle",
                        related_name="settings_controls_and_indicators_controls_on_handle",
                        to="webhallen.component",
                    ),
                ),
                (
                    "heating_time",
                    models.ManyToManyField(
                        help_text="Heating time",
                        related_name="settings_controls_and_indicators_heating_time",
                        to="webhallen.component",
                    ),
                ),
                (
                    "number_of_fan_speed_settings",
                    models.ManyToManyField(
                        help_text="Number of fan speed settings",
                        related_name="settings_controls_and_indicators_number_of_fan_speed_settings",
                        to="webhallen.component",
                    ),
                ),
                (
                    "number_of_speed_settings",
                    models.ManyToManyField(
                        help_text="Number of speed settings",
                        related_name="settings_controls_and_indicators_number_of_speed_settings",
                        to="webhallen.component",
                    ),
                ),
                (
                    "programmable_cleaning_intervals",
                    models.ManyToManyField(
                        help_text="Programmable cleaning intervals",
                        related_name="settings_controls_and_indicators_programmable_cleaning_intervals",
                        to="webhallen.component",
                    ),
                ),
                (
                    "pulse_function",
                    models.ManyToManyField(
                        help_text="Pulse function",
                        related_name="settings_controls_and_indicators_pulse_function",
                        to="webhallen.component",
                    ),
                ),
                (
                    "remote_control",
                    models.ManyToManyField(
                        help_text="Remote control",
                        related_name="settings_controls_and_indicators_remote_control",
                        to="webhallen.component",
                    ),
                ),
                (
                    "room_navigation",
                    models.ManyToManyField(
                        help_text="Room navigation",
                        related_name="settings_controls_and_indicators_room_navigation",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ShippingClass",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the shipping class was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the shipping class was last updated"),
                ),
                (
                    "id",
                    models.PositiveBigIntegerField(help_text="Shipping class ID", primary_key=True, serialize=False),
                ),
                ("order", models.PositiveBigIntegerField(help_text="Order")),
                ("prices", models.ManyToManyField(help_text="Prices", to="webhallen.prices")),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="SmallDevices",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the small devices was created")),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the small devices was last updated"),
                ),
                (
                    "automatic_shutdown",
                    models.ManyToManyField(
                        help_text="Automatic shutdown",
                        related_name="small_devices_automatic_shutdown",
                        to="webhallen.component",
                    ),
                ),
                (
                    "bowl_material",
                    models.ManyToManyField(
                        help_text="Bowl material",
                        related_name="small_devices_bowl_material",
                        to="webhallen.component",
                    ),
                ),
                (
                    "capacity",
                    models.ManyToManyField(
                        help_text="Capacity",
                        related_name="small_devices_capacity",
                        to="webhallen.component",
                    ),
                ),
                (
                    "food_capacity",
                    models.ManyToManyField(
                        help_text="Food capacity",
                        related_name="small_devices_food_capacity",
                        to="webhallen.component",
                    ),
                ),
                (
                    "functions_and_settings",
                    models.ManyToManyField(
                        help_text="Functions and settings",
                        related_name="small_devices_functions_and_settings",
                        to="webhallen.component",
                    ),
                ),
                (
                    "included_blades_and_additives",
                    models.ManyToManyField(
                        help_text="Included blades and additives",
                        related_name="small_devices_included_blades_and_additives",
                        to="webhallen.component",
                    ),
                ),
                (
                    "mass_container_capacity",
                    models.ManyToManyField(
                        help_text="Mass container capacity",
                        related_name="small_devices_mass_container_capacity",
                        to="webhallen.component",
                    ),
                ),
                (
                    "max_speed",
                    models.ManyToManyField(
                        help_text="Max speed",
                        related_name="small_devices_max_speed",
                        to="webhallen.component",
                    ),
                ),
                (
                    "multi_plate",
                    models.ManyToManyField(
                        help_text="Multi-plate",
                        related_name="small_devices_multi_plate",
                        to="webhallen.component",
                    ),
                ),
                (
                    "number_of_people",
                    models.ManyToManyField(
                        help_text="Number of people",
                        related_name="small_devices_number_of_people",
                        to="webhallen.component",
                    ),
                ),
                (
                    "number_of_programs",
                    models.ManyToManyField(
                        help_text="Number of programs",
                        related_name="small_devices_number_of_programs",
                        to="webhallen.component",
                    ),
                ),
                (
                    "product_type",
                    models.ManyToManyField(
                        help_text="Product type",
                        related_name="small_devices_product_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "temperature_settings",
                    models.ManyToManyField(
                        help_text="Temperature settings",
                        related_name="small_devices_temperature_settings",
                        to="webhallen.component",
                    ),
                ),
                (
                    "variable_temperature",
                    models.ManyToManyField(
                        help_text="Variable temperature",
                        related_name="small_devices_variable_temperature",
                        to="webhallen.component",
                    ),
                ),
                (
                    "water_level_indicator",
                    models.ManyToManyField(
                        help_text="Water level indicator",
                        related_name="small_devices_water_level_indicator",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Software",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the software was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the software was last updated")),
                (
                    "license_category",
                    models.ManyToManyField(
                        help_text="License category",
                        related_name="software_license_category",
                        to="webhallen.component",
                    ),
                ),
                (
                    "license_validity_period",
                    models.ManyToManyField(
                        help_text="License validity period",
                        related_name="software_license_validity_period",
                        to="webhallen.component",
                    ),
                ),
                (
                    "number_of_licenses",
                    models.ManyToManyField(
                        help_text="Number of licenses",
                        related_name="software_number_of_licenses",
                        to="webhallen.component",
                    ),
                ),
                (
                    "type",
                    models.ManyToManyField(help_text="Type", related_name="software_type", to="webhallen.component"),
                ),
                (
                    "type_of_license",
                    models.ManyToManyField(
                        help_text="Type of license",
                        related_name="software_type_of_license",
                        to="webhallen.component",
                    ),
                ),
                (
                    "version",
                    models.ManyToManyField(
                        help_text="Version",
                        related_name="software_version",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="SoundSystem",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the sound system was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the sound system was last updated")),
                (
                    "audio_format",
                    models.ManyToManyField(
                        help_text="Audio format",
                        related_name="sound_system_audio_format",
                        to="webhallen.component",
                    ),
                ),
                (
                    "builtin_decoders",
                    models.ManyToManyField(
                        help_text="Built-in decoders",
                        related_name="sound_system_builtin_decoders",
                        to="webhallen.component",
                    ),
                ),
                (
                    "combined_with",
                    models.ManyToManyField(
                        help_text="Combined with",
                        related_name="sound_system_combined_with",
                        to="webhallen.component",
                    ),
                ),
                (
                    "designed_for",
                    models.ManyToManyField(
                        help_text="Designed for",
                        related_name="sound_system_designed_for",
                        to="webhallen.component",
                    ),
                ),
                (
                    "digital_audio_format",
                    models.ManyToManyField(
                        help_text="Digital audio format",
                        related_name="sound_system_digital_audio_format",
                        to="webhallen.component",
                    ),
                ),
                (
                    "digital_player_features",
                    models.ManyToManyField(
                        help_text="Digital player features",
                        related_name="sound_system_digital_player_features",
                        to="webhallen.component",
                    ),
                ),
                (
                    "functions",
                    models.ManyToManyField(
                        help_text="Functions",
                        related_name="sound_system_functions",
                        to="webhallen.component",
                    ),
                ),
                (
                    "max_actuation_distance",
                    models.ManyToManyField(
                        help_text="Max actuation distance",
                        related_name="sound_system_max_actuation_distance",
                        to="webhallen.component",
                    ),
                ),
                (
                    "mode_for_audio_output",
                    models.ManyToManyField(
                        help_text="Mode for audio output",
                        related_name="sound_system_mode_for_audio_output",
                        to="webhallen.component",
                    ),
                ),
                (
                    "recommended_use",
                    models.ManyToManyField(
                        help_text="Recommended use",
                        related_name="sound_system_recommended_use",
                        to="webhallen.component",
                    ),
                ),
                (
                    "speaker_system",
                    models.ManyToManyField(
                        help_text="Speaker system",
                        related_name="sound_system_speaker_system",
                        to="webhallen.component",
                    ),
                ),
                (
                    "sub_category",
                    models.ManyToManyField(
                        help_text="Subcategory",
                        related_name="sound_system_sub_category",
                        to="webhallen.component",
                    ),
                ),
                (
                    "surround_mode",
                    models.ManyToManyField(
                        help_text="Surround mode",
                        related_name="sound_system_surround_mode",
                        to="webhallen.component",
                    ),
                ),
                (
                    "surround_sound_effects",
                    models.ManyToManyField(
                        help_text="Surround sound effects",
                        related_name="sound_system_surround_sound_effects",
                        to="webhallen.component",
                    ),
                ),
                (
                    "surround_system_class",
                    models.ManyToManyField(
                        help_text="Surround system class",
                        related_name="sound_system_surround_system_class",
                        to="webhallen.component",
                    ),
                ),
                (
                    "type",
                    models.ManyToManyField(
                        help_text="Type",
                        related_name="sound_system_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "type_of_digital_player",
                    models.ManyToManyField(
                        help_text="Type of digital player",
                        related_name="sound_system_type_of_digital_player",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="SpeakerSystem",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the speaker system was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the speaker system was last updated"),
                ),
                (
                    "amplification_type",
                    models.ManyToManyField(
                        help_text="Amplification type",
                        related_name="speaker_system_amplification_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "app_controlled",
                    models.ManyToManyField(
                        help_text="App controlled",
                        related_name="speaker_system_app_controlled",
                        to="webhallen.component",
                    ),
                ),
                (
                    "builtin_decoders",
                    models.ManyToManyField(
                        help_text="Built-in decoders",
                        related_name="speaker_system_builtin_decoders",
                        to="webhallen.component",
                    ),
                ),
                (
                    "connection_technology",
                    models.ManyToManyField(
                        help_text="Connection technology",
                        related_name="speaker_system_connection_technology",
                        to="webhallen.component",
                    ),
                ),
                (
                    "continuous_current",
                    models.ManyToManyField(
                        help_text="Continuous current",
                        related_name="speaker_system_continuous_current",
                        to="webhallen.component",
                    ),
                ),
                (
                    "continuous_current_for_sound_system_total",
                    models.ManyToManyField(
                        help_text="Continuous current for sound system total",
                        related_name="speaker_system_continuous_current_for_sound_system_total",
                        to="webhallen.component",
                    ),
                ),
                (
                    "frequency_response",
                    models.ManyToManyField(
                        help_text="Frequency response",
                        related_name="speaker_system_frequency_response",
                        to="webhallen.component",
                    ),
                ),
                (
                    "handsfree_function",
                    models.ManyToManyField(
                        help_text="Hands-free function",
                        related_name="speaker_system_handsfree_function",
                        to="webhallen.component",
                    ),
                ),
                (
                    "integrated_components",
                    models.ManyToManyField(
                        help_text="Integrated components",
                        related_name="speaker_system_integrated_components",
                        to="webhallen.component",
                    ),
                ),
                (
                    "multiple_rooms",
                    models.ManyToManyField(
                        help_text="Multiple rooms",
                        related_name="speaker_system_multiple_rooms",
                        to="webhallen.component",
                    ),
                ),
                (
                    "number_of_crossover_channels",
                    models.ManyToManyField(
                        help_text="Number of crossover channels",
                        related_name="speaker_system_number_of_crossover_channels",
                        to="webhallen.component",
                    ),
                ),
                (
                    "peak_current",
                    models.ManyToManyField(
                        help_text="Peak current",
                        related_name="speaker_system_peak_current",
                        to="webhallen.component",
                    ),
                ),
                (
                    "peak_current_for_sound_system_total",
                    models.ManyToManyField(
                        help_text="Peak current for sound system total",
                        related_name="speaker_system_peak_current_for_sound_system_total",
                        to="webhallen.component",
                    ),
                ),
                (
                    "recommended_location",
                    models.ManyToManyField(
                        help_text="Recommended location",
                        related_name="speaker_system_recommended_location",
                        to="webhallen.component",
                    ),
                ),
                (
                    "series",
                    models.ManyToManyField(
                        help_text="Series",
                        related_name="speaker_system_series",
                        to="webhallen.component",
                    ),
                ),
                (
                    "speaker_configuration",
                    models.ManyToManyField(
                        help_text="Speaker configuration",
                        related_name="speaker_system_speaker_configuration",
                        to="webhallen.component",
                    ),
                ),
                (
                    "speaker_element_diameter_metric",
                    models.ManyToManyField(
                        help_text="Speaker element diameter metric",
                        related_name="speaker_system_speaker_element_diameter_metric",
                        to="webhallen.component",
                    ),
                ),
                (
                    "system_components",
                    models.ManyToManyField(
                        help_text="System components",
                        related_name="speaker_system_system_components",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Stock",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the stock was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the stock was last updated")),
                ("display_cap", models.PositiveBigIntegerField(help_text="Display cap")),
                ("download", models.PositiveBigIntegerField(help_text="Download amount")),
                ("is_sent_from_store", models.BooleanField(help_text="Is sent from store")),
                ("store_1", models.PositiveBigIntegerField(help_text="Stock in store 1")),
                ("store_2", models.PositiveBigIntegerField(help_text="Stock in store 2")),
                ("store_5", models.PositiveBigIntegerField(help_text="Stock in store 5")),
                ("store_9", models.PositiveBigIntegerField(help_text="Stock in store 9")),
                ("store_11", models.PositiveBigIntegerField(help_text="Stock in store 11")),
                ("store_14", models.PositiveBigIntegerField(help_text="Stock in store 14")),
                ("store_15", models.PositiveBigIntegerField(help_text="Stock in store 15")),
                ("store_16", models.PositiveBigIntegerField(help_text="Stock in store 16")),
                ("store_19", models.PositiveBigIntegerField(help_text="Stock in store 19")),
                ("store_20", models.PositiveBigIntegerField(help_text="Stock in store 20")),
                ("store_27", models.PositiveBigIntegerField(help_text="Stock in store 27")),
                ("store_32", models.PositiveBigIntegerField(help_text="Stock in store 32")),
                ("supplier", models.PositiveBigIntegerField(help_text="Stock from supplier")),
                ("web", models.PositiveBigIntegerField(help_text="Stock in web store")),
                (
                    "orders",
                    models.ManyToManyField(
                        help_text="Orders for this stock",
                        related_name="stock",
                        to="webhallen.order",
                    ),
                ),
            ],
            options={
                "verbose_name": "Stock",
                "verbose_name_plural": "Stock",
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Storage",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the storage was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the storage was last updated")),
                (
                    "device_type",
                    models.ManyToManyField(
                        help_text="Device type",
                        related_name="storage_device_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "external_interface_class_for_disk_array",
                    models.ManyToManyField(
                        help_text="External interface class for disk array",
                        related_name="storage_external_interface_class_for_disk_array",
                        to="webhallen.component",
                    ),
                ),
                (
                    "external_interface_for_disk_array",
                    models.ManyToManyField(
                        help_text="External interface for disk array",
                        related_name="storage_external_interface_for_disk_array",
                        to="webhallen.component",
                    ),
                ),
                (
                    "interface",
                    models.ManyToManyField(
                        help_text="Interface",
                        related_name="storage_interface",
                        to="webhallen.component",
                    ),
                ),
                (
                    "iscsi_support",
                    models.ManyToManyField(
                        help_text="iSCSI support",
                        related_name="storage_iscsi_support",
                        to="webhallen.component",
                    ),
                ),
                (
                    "model",
                    models.ManyToManyField(help_text="Model", related_name="storage_model", to="webhallen.component"),
                ),
                (
                    "network_storage_type",
                    models.ManyToManyField(
                        help_text="Network storage type",
                        related_name="storage_network_storage_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "product_type",
                    models.ManyToManyField(
                        help_text="Product type",
                        related_name="storage_product_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "total_array_capacity",
                    models.ManyToManyField(
                        help_text="Total array capacity",
                        related_name="storage_total_array_capacity",
                        to="webhallen.component",
                    ),
                ),
                (
                    "total_storage_capacity",
                    models.ManyToManyField(
                        help_text="Total storage capacity",
                        related_name="storage_total_storage_capacity",
                        to="webhallen.component",
                    ),
                ),
                (
                    "type",
                    models.ManyToManyField(help_text="Type", related_name="storage_type", to="webhallen.component"),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="System",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the system was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the system was last updated")),
                (
                    "device_type",
                    models.ManyToManyField(
                        help_text="Device type",
                        related_name="system_device_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "dockable",
                    models.ManyToManyField(
                        help_text="Dockable",
                        related_name="system_dockable",
                        to="webhallen.component",
                    ),
                ),
                (
                    "docking_interface",
                    models.ManyToManyField(
                        help_text="Docking interface",
                        related_name="system_docking_interface",
                        to="webhallen.component",
                    ),
                ),
                (
                    "embedded_security",
                    models.ManyToManyField(
                        help_text="Embedded security",
                        related_name="system_embedded_security",
                        to="webhallen.component",
                    ),
                ),
                (
                    "fingerprint_reader",
                    models.ManyToManyField(
                        help_text="Fingerprint reader",
                        related_name="system_fingerprint_reader",
                        to="webhallen.component",
                    ),
                ),
                (
                    "generation",
                    models.ManyToManyField(
                        help_text="Generation",
                        related_name="system_generation",
                        to="webhallen.component",
                    ),
                ),
                (
                    "handheld_type",
                    models.ManyToManyField(
                        help_text="Handheld type",
                        related_name="system_handheld_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "hard_drive_capacity",
                    models.ManyToManyField(
                        help_text="Hard drive capacity",
                        related_name="system_hard_drive_capacity",
                        to="webhallen.component",
                    ),
                ),
                (
                    "introduced",
                    models.ManyToManyField(
                        help_text="Introduced",
                        related_name="system_introduced",
                        to="webhallen.component",
                    ),
                ),
                (
                    "notebook_type",
                    models.ManyToManyField(
                        help_text="Notebook type",
                        related_name="system_notebook_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "platform",
                    models.ManyToManyField(
                        help_text="Platform",
                        related_name="system_platform",
                        to="webhallen.component",
                    ),
                ),
                (
                    "platform_technology",
                    models.ManyToManyField(
                        help_text="Platform technology",
                        related_name="system_platform_technology",
                        to="webhallen.component",
                    ),
                ),
                (
                    "type",
                    models.ManyToManyField(help_text="Type", related_name="system_type", to="webhallen.component"),
                ),
                (
                    "video_interface",
                    models.ManyToManyField(
                        help_text="Video interface",
                        related_name="system_video_interface",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="SystemRequirements",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the system requirements was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the system requirements was last updated"),
                ),
                (
                    "os_family",
                    models.ManyToManyField(
                        help_text="OS family",
                        related_name="system_requirements_os_family",
                        to="webhallen.component",
                    ),
                ),
                (
                    "required_operating_system",
                    models.ManyToManyField(
                        help_text="Required operating system",
                        related_name="system_requirements_required_operating_system",
                        to="webhallen.component",
                    ),
                ),
                (
                    "supported_host_platform",
                    models.ManyToManyField(
                        help_text="Supported host platform",
                        related_name="system_requirements_supported_host_platform",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ToastersAndGrills",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When the toasters and grills was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the toasters and grills was last updated"),
                ),
                (
                    "number_of_outlets",
                    models.ManyToManyField(
                        help_text="Number of outlets",
                        related_name="toasters_and_grills_number_of_outlets",
                        to="webhallen.component",
                    ),
                ),
                (
                    "number_of_slices",
                    models.ManyToManyField(
                        help_text="Number of slices",
                        related_name="toasters_and_grills_number_of_slices",
                        to="webhallen.component",
                    ),
                ),
                (
                    "product_type",
                    models.ManyToManyField(
                        help_text="Product type",
                        related_name="toasters_and_grills_product_type",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Data",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the data was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the data was last updated")),
                (
                    "accessories_for_devices",
                    models.ManyToManyField(
                        help_text="Accessories for devices",
                        related_name="data_accessories_for_devices",
                        to="webhallen.accessoriesfordevices",
                    ),
                ),
                (
                    "antenna",
                    models.ManyToManyField(help_text="Antenna", related_name="data_antenna", to="webhallen.antenna"),
                ),
                (
                    "audio_input",
                    models.ManyToManyField(
                        help_text="Audio input",
                        related_name="data_audio_input",
                        to="webhallen.audioinput",
                    ),
                ),
                (
                    "audio_output",
                    models.ManyToManyField(
                        help_text="Audio output",
                        related_name="data_audio_output",
                        to="webhallen.audiooutput",
                    ),
                ),
                (
                    "av_components",
                    models.ManyToManyField(
                        help_text="AV components",
                        related_name="data_av_components",
                        to="webhallen.avcomponent",
                    ),
                ),
                (
                    "battery",
                    models.ManyToManyField(help_text="Battery", related_name="data_battery", to="webhallen.battery"),
                ),
                (
                    "cable",
                    models.ForeignKey(
                        help_text="Cable",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="data_cable",
                        to="webhallen.cable",
                    ),
                ),
                (
                    "camera",
                    models.ManyToManyField(help_text="Camera", related_name="data_camera", to="webhallen.camera"),
                ),
                (
                    "ce_accessories",
                    models.ManyToManyField(
                        help_text="CE accessories",
                        related_name="data_ce_accessories",
                        to="webhallen.ceaccessories",
                    ),
                ),
                (
                    "cleaning",
                    models.ManyToManyField(help_text="Cleaning", related_name="data_cleaning", to="webhallen.cleaning"),
                ),
                (
                    "consumables",
                    models.ManyToManyField(
                        help_text="Consumables",
                        related_name="data_consumables",
                        to="webhallen.consumables",
                    ),
                ),
                (
                    "controller_card",
                    models.ManyToManyField(
                        help_text="Controller card",
                        related_name="data_controller_card",
                        to="webhallen.controllercard",
                    ),
                ),
                (
                    "dimensions_and_weight",
                    models.ForeignKey(
                        help_text="Dimensions and weight",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="data_dimensions_and_weight",
                        to="webhallen.dimensionsandweight",
                    ),
                ),
                (
                    "external_hard_drive",
                    models.ManyToManyField(
                        help_text="External hard drive",
                        related_name="data_external_hard_drive",
                        to="webhallen.externalharddrive",
                    ),
                ),
                (
                    "flash_memory",
                    models.ManyToManyField(
                        help_text="Flash memory",
                        related_name="data_flash_memory",
                        to="webhallen.flashmemory",
                    ),
                ),
                ("game", models.ManyToManyField(help_text="Game", related_name="data_game", to="webhallen.game")),
                (
                    "general",
                    models.ForeignKey(
                        help_text="General",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="data_general",
                        to="webhallen.general",
                    ),
                ),
                (
                    "gross_dimensions_and_weight",
                    models.ForeignKey(
                        help_text="Gross dimensions and weight",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="data_gross_dimensions_and_weight",
                        to="webhallen.grossdimensionsandweight",
                    ),
                ),
                (
                    "hard_drive",
                    models.ManyToManyField(help_text="Harddisk", related_name="data_hard_drive", to="webhallen.hdd"),
                ),
                (
                    "header",
                    models.ForeignKey(
                        help_text="Header",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="data_header",
                        to="webhallen.header",
                    ),
                ),
                (
                    "heating_and_cooling",
                    models.ManyToManyField(
                        help_text="Heating and cooling",
                        related_name="data_heating_and_cooling",
                        to="webhallen.heatingandcooling",
                    ),
                ),
                (
                    "heatsink_and_fan",
                    models.ManyToManyField(
                        help_text="Heatsink and fan",
                        related_name="data_heatsink_and_fan",
                        to="webhallen.heatsinkandfan",
                    ),
                ),
                (
                    "input_device",
                    models.ForeignKey(
                        help_text="Input device",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="data_input_device",
                        to="webhallen.inputdevice",
                    ),
                ),
                (
                    "internet_of_things",
                    models.ManyToManyField(
                        help_text="Internet of things",
                        related_name="data_internet_of_things",
                        to="webhallen.internetofthings",
                    ),
                ),
                (
                    "light_source",
                    models.ManyToManyField(
                        help_text="Light sources",
                        related_name="data_light_source",
                        to="webhallen.lightsource",
                    ),
                ),
                (
                    "memory_adapter",
                    models.ManyToManyField(
                        help_text="Memory adapter",
                        related_name="data_memory_adapter",
                        to="webhallen.memoryadapter",
                    ),
                ),
                (
                    "memory_module",
                    models.ManyToManyField(
                        help_text="Memory module",
                        related_name="data_memory_module",
                        to="webhallen.memorymodule",
                    ),
                ),
                (
                    "miscellaneous",
                    models.ForeignKey(
                        help_text="Miscellaneous",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="data_miscellaneous",
                        to="webhallen.miscellaneous",
                    ),
                ),
                (
                    "mobile_broadband",
                    models.ManyToManyField(
                        help_text="Mobile broadband",
                        related_name="data_mobile_broadband",
                        to="webhallen.mobilebroadband",
                    ),
                ),
                ("modem", models.ManyToManyField(help_text="Modem", related_name="data_modem", to="webhallen.modem")),
                (
                    "network",
                    models.ManyToManyField(help_text="Network", related_name="data_network", to="webhallen.network"),
                ),
                (
                    "optical_storage",
                    models.ManyToManyField(
                        help_text="Optical storage",
                        related_name="data_optical_storage",
                        to="webhallen.opticalstorage",
                    ),
                ),
                (
                    "optical_storage_secondary",
                    models.ManyToManyField(
                        help_text="Optical storage secondary",
                        related_name="data_optical_storage_secondary",
                        to="webhallen.opticalstoragesecondary",
                    ),
                ),
                (
                    "personal_hygiene",
                    models.ManyToManyField(
                        help_text="Personal hygiene",
                        related_name="data_personal_hygiene",
                        to="webhallen.personalhygiene",
                    ),
                ),
                (
                    "portable_storage_solution",
                    models.ManyToManyField(
                        help_text="Portable storage solution",
                        related_name="data_portable_storage_solution",
                        to="webhallen.portablestoragesolution",
                    ),
                ),
                ("power", models.ManyToManyField(help_text="Power", related_name="data_power", to="webhallen.power")),
                (
                    "power_supply",
                    models.ManyToManyField(
                        help_text="Power supply",
                        related_name="data_power_supply",
                        to="webhallen.powersupply",
                    ),
                ),
                (
                    "radio_system",
                    models.ManyToManyField(
                        help_text="Radio system",
                        related_name="data_radio_system",
                        to="webhallen.radiosystem",
                    ),
                ),
                ("ram", models.ManyToManyField(help_text="RAM", related_name="data_ram", to="webhallen.ram")),
                (
                    "remote_control",
                    models.ManyToManyField(
                        help_text="Remote control",
                        related_name="data_remote_control",
                        to="webhallen.remotecontrol",
                    ),
                ),
                ("scale", models.ManyToManyField(help_text="Scale", related_name="data_scale", to="webhallen.scale")),
                (
                    "service_and_support",
                    models.ForeignKey(
                        help_text="Service and support",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="data_service_and_support",
                        to="webhallen.serviceandsupport",
                    ),
                ),
                (
                    "settings_controls_and_indicators",
                    models.ManyToManyField(
                        help_text="Settings, controls and indicators",
                        related_name="data_settings_controls_and_indicators",
                        to="webhallen.settingscontrolsandindicators",
                    ),
                ),
                (
                    "small_devices",
                    models.ManyToManyField(
                        help_text="Small devices",
                        related_name="data_small_devices",
                        to="webhallen.smalldevices",
                    ),
                ),
                (
                    "software",
                    models.ManyToManyField(help_text="Software", related_name="data_software", to="webhallen.software"),
                ),
                (
                    "sound_system",
                    models.ManyToManyField(
                        help_text="Sound system",
                        related_name="data_sound_system",
                        to="webhallen.soundsystem",
                    ),
                ),
                (
                    "speaker_system",
                    models.ManyToManyField(
                        help_text="Speaker system",
                        related_name="data_speaker_system",
                        to="webhallen.speakersystem",
                    ),
                ),
                (
                    "storage",
                    models.ManyToManyField(help_text="Storage", related_name="data_storage", to="webhallen.storage"),
                ),
                (
                    "system",
                    models.ManyToManyField(help_text="System", related_name="data_system", to="webhallen.system"),
                ),
                (
                    "system_requirements",
                    models.ManyToManyField(
                        help_text="System requirements",
                        related_name="data_system_requirements",
                        to="webhallen.systemrequirements",
                    ),
                ),
                (
                    "toasters_and_grills",
                    models.ManyToManyField(
                        help_text="Toasters and grills",
                        related_name="data_toasters_and_grills",
                        to="webhallen.toastersandgrills",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("id", models.PositiveBigIntegerField(help_text="User ID", primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the user was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the user was last updated")),
                ("username", models.TextField(help_text="Username")),
                ("is_public_profile", models.BooleanField(help_text="Is public profile")),
                ("rank_level", models.PositiveBigIntegerField(help_text="Rank level")),
                (
                    "avatar",
                    models.ForeignKey(
                        help_text="Avatar",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webhallen.avatar",
                    ),
                ),
                (
                    "knighthood",
                    models.ForeignKey(
                        help_text="Knighthood",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webhallen.knighthood",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ReviewHighlight",
            fields=[
                (
                    "id",
                    models.PositiveBigIntegerField(help_text="Review highlight ID", primary_key=True, serialize=False),
                ),
                ("created", models.DateTimeField(auto_now_add=True, help_text="When the review highlight was created")),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When the review highlight was last updated"),
                ),
                ("text", models.TextField(help_text="Review highlight text")),
                ("rating", models.PositiveBigIntegerField(help_text="Rating")),
                ("upvotes", models.PositiveBigIntegerField(help_text="Upvotes")),
                ("downvotes", models.PositiveBigIntegerField(help_text="Downvotes")),
                ("verified_purchase", models.BooleanField(help_text="Verified purchase")),
                ("created_at", models.DateTimeField(help_text="Created at")),
                ("is_anonymous", models.BooleanField(help_text="Is anonymous")),
                ("is_employee", models.BooleanField(help_text="Is employee")),
                ("is_hype", models.BooleanField(help_text="Is hype")),
                (
                    "product",
                    models.ForeignKey(
                        help_text="Product",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webhallen.reviewhighlightproduct",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webhallen.user",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ListClass",
            fields=[
                ("id", models.PositiveBigIntegerField(help_text="List ID", primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the list was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the list was last updated")),
                ("discontinued", models.BooleanField(help_text="Is discontinued")),
                ("is_fyndware", models.BooleanField(help_text="Is Fyndware")),
                ("name", models.TextField(help_text="Name")),
                ("variant_name", models.TextField(help_text="Variant name")),
                (
                    "energy_marking",
                    models.ForeignKey(
                        help_text="Energy marking",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="list_classes",
                        to="webhallen.energymarking",
                    ),
                ),
                (
                    "lowest_price",
                    models.ForeignKey(
                        help_text="Lowest price",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="list_classes_lowest_price",
                        to="webhallen.price",
                    ),
                ),
                (
                    "price",
                    models.ForeignKey(
                        help_text="Price",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="list_classes_price",
                        to="webhallen.price",
                    ),
                ),
                (
                    "regular_price",
                    models.ForeignKey(
                        help_text="Regular price",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="list_classes_regular_price",
                        to="webhallen.price",
                    ),
                ),
                (
                    "release",
                    models.ForeignKey(
                        help_text="Release",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="list_classes_release",
                        to="webhallen.release",
                    ),
                ),
                (
                    "stock",
                    models.ForeignKey(
                        help_text="Stock",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="list_classes_stock",
                        to="webhallen.stock",
                    ),
                ),
                (
                    "variant_properties",
                    models.ForeignKey(
                        help_text="Variant properties",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="list_classes_variant_properties",
                        to="webhallen.variantproperties",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Variants",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the variant was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the variant was last updated")),
                ("group", models.PositiveBigIntegerField(help_text="Group")),
                (
                    "canonical_variant",
                    models.ForeignKey(
                        help_text="Canonical variant",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webhallen.canonicalvariant",
                    ),
                ),
                (
                    "list",
                    models.ForeignKey(
                        help_text="List",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webhallen.listclass",
                    ),
                ),
                ("variant_groups", models.ManyToManyField(help_text="Variant groups", to="webhallen.variantgroups")),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "webhallen_id",
                    models.PositiveBigIntegerField(help_text="Webhallen product ID", primary_key=True, serialize=False),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the product was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the product was last updated")),
                ("canonical_link", models.URLField(help_text="Canonical link")),
                ("category_tree", models.TextField(help_text="Category tree")),
                ("description", models.TextField(help_text="Product description")),
                ("description_provider", models.PositiveBigIntegerField(help_text="Description provider")),
                ("discontinued", models.BooleanField(help_text="Is discontinued")),
                ("is_collectable", models.BooleanField(help_text="Is collectable")),
                ("is_digital", models.BooleanField(help_text="Is digital")),
                ("is_fyndware", models.BooleanField(help_text="Is Fyndware")),
                ("is_shippable", models.BooleanField(help_text="Is shippable")),
                ("long_delivery_notice", models.TextField(help_text="Long delivery notice")),
                ("main_title", models.TextField(help_text="Main title")),
                ("meta_description", models.TextField(help_text="Meta description")),
                ("meta_title", models.TextField(help_text="Meta title")),
                ("minimum_rank_level", models.PositiveBigIntegerField(help_text="Minimum rank level")),
                ("name", models.TextField(help_text="Product name")),
                ("package_size_id", models.PositiveBigIntegerField(help_text="Package size ID")),
                ("phone_subscription", models.BooleanField(help_text="Is a phone subscription")),
                ("sub_title", models.TextField(help_text="Sub title")),
                ("thumbnail", models.URLField(help_text="Thumbnail URL")),
                ("ticket", models.TextField(help_text="Ticket")),
                (
                    "average_rating",
                    auto_prefetch.ForeignKey(
                        help_text="Average rating",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webhallen.averagerating",
                    ),
                ),
                (
                    "categories",
                    models.ManyToManyField(
                        help_text="Categories",
                        related_name="product_categories",
                        to="webhallen.categories",
                    ),
                ),
                (
                    "data",
                    auto_prefetch.ForeignKey(
                        help_text="Data",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webhallen.data",
                    ),
                ),
                ("eans", models.ManyToManyField(help_text="EANs", related_name="product_eans", to="webhallen.ean")),
                (
                    "energy_marking",
                    auto_prefetch.ForeignKey(
                        help_text="Energy marking",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webhallen.energymarking",
                    ),
                ),
                (
                    "fyndware_class",
                    auto_prefetch.ForeignKey(
                        help_text="Fyndware class",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webhallen.fyndwareclass",
                    ),
                ),
                (
                    "images",
                    models.ManyToManyField(help_text="Images", related_name="product_images", to="webhallen.image"),
                ),
                (
                    "insurance",
                    models.ManyToManyField(
                        help_text="Insurance",
                        related_name="product_insurance",
                        to="webhallen.insurance",
                    ),
                ),
                (
                    "level_one_price",
                    auto_prefetch.ForeignKey(
                        help_text="The level one price of the product",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="level_one_price",
                        to="webhallen.price",
                    ),
                ),
                (
                    "lowest_price",
                    auto_prefetch.ForeignKey(
                        help_text="The lowest price of the product",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lowest_price",
                        to="webhallen.price",
                    ),
                ),
                (
                    "main_category_path",
                    auto_prefetch.ForeignKey(
                        help_text="Main category path",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webhallen.maincategorypath",
                    ),
                ),
                (
                    "manufacturer",
                    auto_prefetch.ForeignKey(
                        help_text="Manufacturer",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webhallen.manufacturer",
                    ),
                ),
                (
                    "meta",
                    auto_prefetch.ForeignKey(
                        help_text="Meta",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webhallen.meta",
                    ),
                ),
                (
                    "part_numbers",
                    models.ManyToManyField(
                        help_text="Part numbers",
                        related_name="product_part_numbers",
                        to="webhallen.partnumber",
                    ),
                ),
                (
                    "possible_delivery_methods",
                    models.ManyToManyField(
                        help_text="Possible delivery methods",
                        related_name="product_possible_delivery_methods",
                        to="webhallen.possibledeliverymethod",
                    ),
                ),
                (
                    "price",
                    auto_prefetch.ForeignKey(
                        help_text="The price of the product",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="current_price",
                        to="webhallen.price",
                    ),
                ),
                (
                    "regular_price",
                    auto_prefetch.ForeignKey(
                        help_text="The regular price of the product",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="regular_price",
                        to="webhallen.price",
                    ),
                ),
                (
                    "release",
                    auto_prefetch.ForeignKey(
                        help_text="Release",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webhallen.release",
                    ),
                ),
                (
                    "resurs_part_payment_price",
                    models.ManyToManyField(
                        help_text="Resurs part payment price",
                        related_name="product_resurs_part_payment_price",
                        to="webhallen.resurspartpaymentprice",
                    ),
                ),
                (
                    "review_highlight",
                    models.ManyToManyField(
                        help_text="Review highlights",
                        related_name="product_review_highlight",
                        to="webhallen.reviewhighlight",
                    ),
                ),
                (
                    "section",
                    auto_prefetch.ForeignKey(
                        help_text="Section",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webhallen.section",
                    ),
                ),
                (
                    "shipping_class",
                    auto_prefetch.ForeignKey(
                        help_text="Shipping class",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webhallen.shippingclass",
                    ),
                ),
                (
                    "status_codes",
                    models.ManyToManyField(
                        help_text="Status codes",
                        related_name="product_status_codes",
                        to="webhallen.statuscode",
                    ),
                ),
                (
                    "stock",
                    auto_prefetch.ForeignKey(
                        help_text="Stock",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="webhallen.stock",
                    ),
                ),
                (
                    "variants",
                    models.ManyToManyField(
                        help_text="Variants",
                        related_name="product_variants",
                        to="webhallen.variants",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="VideoInput",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the video input was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the video input was last updated")),
                (
                    "analog_video_signal",
                    models.ManyToManyField(
                        help_text="Analog video signal",
                        related_name="video_input_analog_video_signal",
                        to="webhallen.component",
                    ),
                ),
                (
                    "camera_mounting_type",
                    models.ManyToManyField(
                        help_text="Camera mounting type",
                        related_name="video_input_camera_mounting_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "camera_type",
                    models.ManyToManyField(
                        help_text="Camera type",
                        related_name="video_input_camera_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "combined_with",
                    models.ManyToManyField(
                        help_text="Combined with",
                        related_name="video_input_combined_with",
                        to="webhallen.component",
                    ),
                ),
                (
                    "computer_interface",
                    models.ManyToManyField(
                        help_text="Computer interface",
                        related_name="video_input_computer_interface",
                        to="webhallen.component",
                    ),
                ),
                (
                    "connection_technology",
                    models.ManyToManyField(
                        help_text="Connection technology",
                        related_name="video_input_connection_technology",
                        to="webhallen.component",
                    ),
                ),
                (
                    "continuous_shooting_rate",
                    models.ManyToManyField(
                        help_text="Continuous shooting rate",
                        related_name="video_input_continuous_shooting_rate",
                        to="webhallen.component",
                    ),
                ),
                (
                    "day_and_night_function",
                    models.ManyToManyField(
                        help_text="Day and night function",
                        related_name="video_input_day_and_night_function",
                        to="webhallen.component",
                    ),
                ),
                (
                    "digital_camera_type",
                    models.ManyToManyField(
                        help_text="Digital camera type",
                        related_name="video_input_digital_camera_type",
                        to="webhallen.component",
                    ),
                ),
                (
                    "digital_zoom",
                    models.ManyToManyField(
                        help_text="Digital zoom",
                        related_name="video_input_digital_zoom",
                        to="webhallen.component",
                    ),
                ),
                (
                    "face_recognition",
                    models.ManyToManyField(
                        help_text="Face recognition",
                        related_name="video_input_face_recognition",
                        to="webhallen.component",
                    ),
                ),
                (
                    "form_factor",
                    models.ManyToManyField(
                        help_text="Form factor",
                        related_name="video_input_form_factor",
                        to="webhallen.component",
                    ),
                ),
                (
                    "format_for_analog_video",
                    models.ManyToManyField(
                        help_text="Format for analog video",
                        related_name="video_input_format_for_analog_video",
                        to="webhallen.component",
                    ),
                ),
                (
                    "format_for_digital_video",
                    models.ManyToManyField(
                        help_text="Format for digital video",
                        related_name="video_input_format_for_digital_video",
                        to="webhallen.component",
                    ),
                ),
                (
                    "frame_rate_max",
                    models.ManyToManyField(
                        help_text="Frame rate max",
                        related_name="video_input_frame_rate_max",
                        to="webhallen.component",
                    ),
                ),
                (
                    "image_capture_format",
                    models.ManyToManyField(
                        help_text="Image capture format",
                        related_name="video_input_image_capture_format",
                        to="webhallen.component",
                    ),
                ),
                (
                    "image_stabilizer",
                    models.ManyToManyField(
                        help_text="Image stabilizer",
                        related_name="video_input_image_stabilizer",
                        to="webhallen.component",
                    ),
                ),
                (
                    "iso_max",
                    models.ManyToManyField(
                        help_text="ISO max",
                        related_name="video_input_iso_max",
                        to="webhallen.component",
                    ),
                ),
                (
                    "light_sensitivity",
                    models.ManyToManyField(
                        help_text="Light sensitivity",
                        related_name="video_input_light_sensitivity",
                        to="webhallen.component",
                    ),
                ),
                (
                    "max_video_resolution",
                    models.ManyToManyField(
                        help_text="Max video resolution",
                        related_name="video_input_max_video_resolution",
                        to="webhallen.component",
                    ),
                ),
                (
                    "maximum_digital_video_resolution",
                    models.ManyToManyField(
                        help_text="Maximum digital video resolution",
                        related_name="video_input_maximum_digital_video_resolution",
                        to="webhallen.component",
                    ),
                ),
                (
                    "mechanical_camera_design",
                    models.ManyToManyField(
                        help_text="Mechanical camera design",
                        related_name="video_input_mechanical_camera_design",
                        to="webhallen.component",
                    ),
                ),
                (
                    "motion_detection",
                    models.ManyToManyField(
                        help_text="Motion detection",
                        related_name="video_input_motion_detection",
                        to="webhallen.component",
                    ),
                ),
                (
                    "properties",
                    models.ManyToManyField(
                        help_text="Properties",
                        related_name="video_input_properties",
                        to="webhallen.component",
                    ),
                ),
                (
                    "provided_interfaces",
                    models.ManyToManyField(
                        help_text="Provided interfaces",
                        related_name="video_input_provided_interfaces",
                        to="webhallen.component",
                    ),
                ),
                (
                    "resolution_for_digital_video_capture",
                    models.ManyToManyField(
                        help_text="Resolution for digital video capture",
                        related_name="video_input_resolution_for_digital_video_capture",
                        to="webhallen.component",
                    ),
                ),
                (
                    "resolution_for_still_shot",
                    models.ManyToManyField(
                        help_text="Resolution for still shot",
                        related_name="video_input_resolution_for_still_shot",
                        to="webhallen.component",
                    ),
                ),
                (
                    "special_effects",
                    models.ManyToManyField(
                        help_text="Special effects",
                        related_name="video_input_special_effects",
                        to="webhallen.component",
                    ),
                ),
                (
                    "support_for_audio",
                    models.ManyToManyField(
                        help_text="Support for audio",
                        related_name="video_input_support_for_audio",
                        to="webhallen.component",
                    ),
                ),
                (
                    "support_for_audio_input",
                    models.ManyToManyField(
                        help_text="Support for audio input",
                        related_name="video_input_support_for_audio_input",
                        to="webhallen.component",
                    ),
                ),
                (
                    "support_for_high_resolution_video",
                    models.ManyToManyField(
                        help_text="Support for high resolution video",
                        related_name="video_input_support_for_high_resolution_video",
                        to="webhallen.component",
                    ),
                ),
                (
                    "type",
                    models.ManyToManyField(help_text="Type", related_name="video_input_type", to="webhallen.component"),
                ),
                (
                    "type_of_interface",
                    models.ManyToManyField(
                        help_text="Type of interface",
                        related_name="video_input_type_of_interface",
                        to="webhallen.component",
                    ),
                ),
                (
                    "video_interface",
                    models.ManyToManyField(
                        help_text="Video interface",
                        related_name="video_input_video_interface",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name="data",
            name="video_input",
            field=models.ManyToManyField(
                help_text="Video input",
                related_name="data_video_input",
                to="webhallen.videoinput",
            ),
        ),
        migrations.CreateModel(
            name="VideoOutput",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the video output was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the video output was last updated")),
                (
                    "chip_manufacturer",
                    models.ManyToManyField(
                        help_text="Chip manufacturer",
                        related_name="video_output_chip_manufacturer",
                        to="webhallen.component",
                    ),
                ),
                (
                    "clock_speed",
                    models.ManyToManyField(
                        help_text="Clock speed",
                        related_name="video_output_clock_speed",
                        to="webhallen.component",
                    ),
                ),
                (
                    "dedicated_graphics_card",
                    models.ManyToManyField(
                        help_text="Dedicated graphics card",
                        related_name="video_output_dedicated_graphics_card",
                        to="webhallen.component",
                    ),
                ),
                (
                    "graphics_card",
                    models.ManyToManyField(
                        help_text="Graphics card",
                        related_name="video_output_graphics_card",
                        to="webhallen.component",
                    ),
                ),
                (
                    "graphics_processor_series",
                    models.ManyToManyField(
                        help_text="Graphics processor series",
                        related_name="video_output_graphics_processor_series",
                        to="webhallen.component",
                    ),
                ),
                (
                    "hdcp_compatible",
                    models.ManyToManyField(
                        help_text="HDCP compatible",
                        related_name="video_output_hdcp_compatible",
                        to="webhallen.component",
                    ),
                ),
                (
                    "hdr_capacity",
                    models.ManyToManyField(
                        help_text="HDR capacity",
                        related_name="video_output_hdr_capacity",
                        to="webhallen.component",
                    ),
                ),
                (
                    "high_clock_speed",
                    models.ManyToManyField(
                        help_text="High clock speed",
                        related_name="video_output_high_clock_speed",
                        to="webhallen.component",
                    ),
                ),
                (
                    "low",
                    models.ManyToManyField(help_text="Low", related_name="video_output_low", to="webhallen.component"),
                ),
                (
                    "max_number_of_supported_displays",
                    models.ManyToManyField(
                        help_text="Max number of supported displays",
                        related_name="video_output_max_number_of_supported_displays",
                        to="webhallen.component",
                    ),
                ),
                (
                    "maximum_external_resolution",
                    models.ManyToManyField(
                        help_text="Maximum external resolution",
                        related_name="video_output_maximum_external_resolution",
                        to="webhallen.component",
                    ),
                ),
                (
                    "supported_video_signals",
                    models.ManyToManyField(
                        help_text="Supported video signals",
                        related_name="video_output_supported_video_signals",
                        to="webhallen.component",
                    ),
                ),
                (
                    "tv_connection",
                    models.ManyToManyField(
                        help_text="TV connection",
                        related_name="video_output_tv_connection",
                        to="webhallen.component",
                    ),
                ),
                ("type", models.ManyToManyField(help_text="Type", to="webhallen.component")),
                (
                    "type_of_interface",
                    models.ManyToManyField(
                        help_text="Type of interface",
                        related_name="video_output_type_of_interface",
                        to="webhallen.component",
                    ),
                ),
                (
                    "vr_ready",
                    models.ManyToManyField(
                        help_text="VR ready",
                        related_name="video_output_vr_ready",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name="data",
            name="video_output",
            field=models.ManyToManyField(
                help_text="Video output",
                related_name="data_video_output",
                to="webhallen.videooutput",
            ),
        ),
        migrations.CreateModel(
            name="Warranty",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="When the warranty was created")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="When the warranty was last updated")),
                (
                    "warranty",
                    models.ManyToManyField(
                        help_text="Warranty",
                        related_name="warranty_warranty",
                        to="webhallen.component",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name="data",
            name="warranty",
            field=models.ManyToManyField(help_text="Warranty", related_name="data_warranty", to="webhallen.warranty"),
        ),
    ]
